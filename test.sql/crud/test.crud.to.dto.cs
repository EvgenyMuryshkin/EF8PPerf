namespace test.mapper
{
// autogenerated by ServerMapperGenerator
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable IDE0017 // Object Initialization
#pragma warning disable IDE0028 // Collection Initialization
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning disable CS0105 // Using directive appeared previously in this namespace
#pragma warning disable CS0612 // Type or member is obsolete
using crosscutting;
using crosscutting.sql;
using crosscutting.cqrs;
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Linq;
using shared.sql;
	using test.model;
	using test.sql;
	using test.model;
// generated class, do not modify, source here: file:///placeholder
public partial class tstTestDBContextCRUD
{
	public async Task<IEntity> ToDTOVisitor(IDbEntity entity)
	{
		switch(entity)
		{
			case tstCompositeChildDbEntity e: return await ToDTO(e);
			case tstNestedCompositesDbEntity e: return await ToDTO(e);
			case tstT009CompositeDbEntity e: return await ToDTO(e);
			case tstT010CompositeRefChildDbEntity e: return await ToDTO(e);
			case tstT011CompositeRefParentContainerDbEntity e: return await ToDTO(e);
			case tstT012CompositeRefParentContainerDbEntity e: return await ToDTO(e);
			case tstT013CompositeRefParentContainerDbEntity e: return await ToDTO(e);
			case tstRawDbEntity e: return await ToDTO(e);
			case tstRequiredSharedRefDbEntity e: return await ToDTO(e);
			case tstOptionalSharedRefDbEntity e: return await ToDTO(e);
			case tstCompositeRefParentDbEntity e: return await ToDTO(e);
			case tstOptionalCompositeRefParentDbEntity e: return await ToDTO(e);
			case tstOwnerContainerDbEntity e: return await ToDTO(e);
			case tstCompositesContainerDbEntity e: return await ToDTO(e);
			case tstSharedContainerDbEntity e: return await ToDTO(e);
			case tstMultipleSharedContainerDbEntity e: return await ToDTO(e);
			case tstMixedContainerDbEntity e: return await ToDTO(e);
			case tstMultipleCompositeRefDbEntity e: return await ToDTO(e);
			case tstMultipleSharedRefDbEntity e: return await ToDTO(e);
			case tstNestedCompositeRootDbEntity e: return await ToDTO(e);
			case tstChildDbEntity e: return await ToDTO(e);
			case tstParentDbEntity e: return await ToDTO(e);
			case tstT001ChildDbEntity e: return await ToDTO(e);
			case tstT001ParentOwnerDbEntity e: return await ToDTO(e);
			case tstParentWithSharedListDbEntity e: return await ToDTO(e);
			case tstT002ChildDbEntity e: return await ToDTO(e);
			case tstT002ParentOwnerDbEntity e: return await ToDTO(e);
			case tstT002ChildHolderDbEntity e: return await ToDTO(e);
			case tstT003ChildDbEntity e: return await ToDTO(e);
			case tstT003ParentOwnerDbEntity e: return await ToDTO(e);
			case tstT003ChildHolderDbEntity e: return await ToDTO(e);
			case tstT004RecursiveLinkSetDbEntity e: return await ToDTO(e);
			case tstT005RecursiveLinkListDbEntity e: return await ToDTO(e);
			case tstT006PerfMaxQueryItemDbEntity e: return await ToDTO(e);
			case tstT006PerfMaxQueryValueDbEntity e: return await ToDTO(e);
			case tstT007LeafDbEntity e: return await ToDTO(e);
			case tstT007RootDbEntity e: return await ToDTO(e);
			case tstT008ParentDbEntity e: return await ToDTO(e);
			case tstT009PrincipalDbEntity e: return await ToDTO(e);
			case tstT009UserDbEntity e: return await ToDTO(e);
			case tstT010CompositeRefParentDbEntity e: return await ToDTO(e);
			case tstT011CompositeRefParentDbEntity e: return await ToDTO(e);
			case tstT012CompositeRefParentDbEntity e: return await ToDTO(e);
			case tstT013CompositeRefParentDbEntity e: return await ToDTO(e);
			case tstT014AutoCreateValueDbEntity e: return await ToDTO(e);
			default: return null;
		}
	}
	public async Task<tstCompositeChild> ToDTO(tstICompositeChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstCompositeChild);
			return copy;
		}
		var entity = entityInterface as tstCompositeChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstCompositeChild();
		dto.Id = entity.Id;
		dto.Value = entity.Value ?? "";
		// Navigation properties
		// Back relationship for tstNestedComposites.Composite, ref
		// Back reference for tstNestedComposites.ChildrenIds, ordered
		// Back relationship for tstT011CompositeRefParentContainer.CompositeChild, ref
		// Back reference for tstT011CompositeRefParentContainer.CompositeChildrenIds, ordered
		// Back relationship for tstT012CompositeRefParentContainer.CompositeChild, ref
		// Back reference for tstT013CompositeRefParentContainer.CompositeChildrenIds, ordered
		// Back relationship for tstCompositeRefParent.Composite, ref
		// Back relationship for tstOptionalCompositeRefParent.Composite, ref
		// Back reference for tstCompositesContainer.CompositeIds, assorted
		// Back relationship for tstMultipleCompositeRef.Composite, ref
		// Back relationship for tstMultipleCompositeRef.OptionalComposite, ref
		// Back relationship for tstNestedCompositeRoot.Composite, ref
		// Back relationship for tstNestedCompositeRoot.OptionalComposite, ref
		// Back relationship for tstT001Child.CompositeChild, ref
		// Back relationship for tstT008Parent.Child, ref
		return dto;
	}
	public async Task<tstNestedComposites> ToDTO(tstINestedCompositesDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstNestedComposites);
			return copy;
		}
		var entity = entityInterface as tstNestedCompositesDbEntity;
		if (entity == null ) return null;
		var dto = new tstNestedComposites();
		dto.Id = entity.Id;
		dto.Composite = await ToDTO(entity.Composite);
		dto.Children = await Ordered.ConvertCompositeRelationship(entity.Children, (e) => e.IndexInNestedComposites, ToDTO);
		// Navigation properties
		// Back relationship for tstNestedCompositeRoot.Nested, ref
		return dto;
	}
	public async Task<tstT009Composite> ToDTO(tstIT009CompositeDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT009Composite);
			return copy;
		}
		var entity = entityInterface as tstT009CompositeDbEntity;
		if (entity == null ) return null;
		var dto = new tstT009Composite();
		dto.Id = entity.Id;
		dto.Value = entity.Value;
		// Navigation properties
		// Back relationship for tstT009Principal.Composite, ref
		// Back reference for tstT009Principal.T009CompositeIds, ordered
		return dto;
	}
	public async Task<tstT010CompositeRefChild> ToDTO(tstIT010CompositeRefChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT010CompositeRefChild);
			return copy;
		}
		var entity = entityInterface as tstT010CompositeRefChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstT010CompositeRefChild();
		dto.Id = entity.Id;
		dto.Value = entity.Value ?? "";
		dto.RawId = new Ref<tstRaw>(entity.RawId);
		// Navigation properties
		// Back relationship for tstT010CompositeRefParent.T010CompositeRefChild, ref
		// Back reference for tstT010CompositeRefParent.T010CompositeRefChildrenIds, ordered
		return dto;
	}
	public async Task<tstT011CompositeRefParentContainer> ToDTO(tstIT011CompositeRefParentContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT011CompositeRefParentContainer);
			return copy;
		}
		var entity = entityInterface as tstT011CompositeRefParentContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT011CompositeRefParentContainer();
		dto.Id = entity.Id;
		dto.CompositeChildren = await Ordered.ConvertCompositeRelationship(entity.CompositeChildren, (e) => e.IndexInT011CompositeRefParentContainer, ToDTO);
		dto.CompositeChild = await ToDTO(entity.CompositeChild);
		// Navigation properties
		// Back relationship for tstT011CompositeRefParent.Container, ref
		return dto;
	}
	public async Task<tstT012CompositeRefParentContainer> ToDTO(tstIT012CompositeRefParentContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT012CompositeRefParentContainer);
			return copy;
		}
		var entity = entityInterface as tstT012CompositeRefParentContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT012CompositeRefParentContainer();
		dto.Id = entity.Id;
		dto.CompositeChild = await ToDTO(entity.CompositeChild);
		// Navigation properties
		// Back relationship for tstT012CompositeRefParent.Container, ref
		return dto;
	}
	public async Task<tstT013CompositeRefParentContainer> ToDTO(tstIT013CompositeRefParentContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT013CompositeRefParentContainer);
			return copy;
		}
		var entity = entityInterface as tstT013CompositeRefParentContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT013CompositeRefParentContainer();
		dto.Id = entity.Id;
		dto.CompositeChildren = await Ordered.ConvertCompositeRelationship(entity.CompositeChildren, (e) => e.IndexInT013CompositeRefParentContainer, ToDTO);
		// Navigation properties
		// Back relationship for tstT013CompositeRefParent.Container, ref
		return dto;
	}
	public async Task<tstT015CompositeChild> ToDTO(tstIT015CompositeChildDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015CompositeChild);
			return copy;
		}
		var entity = entityInterface as tstT015CompositeChildDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015CompositeChild();
		dto.Id = entity.Id;
		dto.ChildL1Value = entity.ChildL1Value;
		dto.Comments = entity.Comments ?? "";
		// Navigation properties
		return dto;
	}
	public async Task<tstT016CompositeChildRecord> ToDTO(tstIT016CompositeChildRecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT016CompositeChildRecord);
			return copy;
		}
		var entity = entityInterface as tstT016CompositeChildRecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT016CompositeChildRecord();
		dto.Id = entity.Id;
		dto.ChildValue = entity.ChildValue;
		dto.Comments = entity.Comments ?? "";
		// Navigation properties
		return dto;
	}
	public async Task<tstRaw> ToDTO(tstIRawDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstRaw);
			return copy;
		}
		var entity = entityInterface as tstRawDbEntity;
		if (entity == null ) return null;
		var dto = new tstRaw(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Index = entity.Index;
		dto.DateTime = entity.DateTime.FromDBasUTC();
		// Navigation properties
		// Back relationship for tstT010CompositeRefChild.RawId, ref
		// Back relationship for tstRequiredSharedRef.RawId, ref
		// Back relationship for tstOptionalSharedRef.RawId, ref
		// Back reference for tstOwnerContainer.RawIds, assorted
		// No back relationship for tstSharedContainer.SharedIds, shared
		// No back relationship for tstMultipleSharedContainer.FirstSharedIds, shared
		// No back relationship for tstMultipleSharedContainer.SecondSharedIds, shared
		// Back reference for tstMixedContainer.OwnedIds, assorted
		// No back relationship for tstMixedContainer.SharedIds, shared
		// Back relationship for tstMultipleSharedRef.RawId, ref
		// Back relationship for tstMultipleSharedRef.OptionalRawId, ref
		// Back relationship for tstNestedCompositeRoot.OptionalRawId, ref
		// No back relationship for tstNestedCompositeRoot.RawListIds, shared
		// No back relationship for tstParentWithSharedList.RawListIds, shared
		// Back relationship for tstT008Parent.RawId, ref
		// Back relationship for tstT014AutoCreateValue.ReferenceId, ref
		return dto;
	}
	public async Task<tstRequiredSharedRef> ToDTO(tstIRequiredSharedRefDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstRequiredSharedRef);
			return copy;
		}
		var entity = entityInterface as tstRequiredSharedRefDbEntity;
		if (entity == null ) return null;
		var dto = new tstRequiredSharedRef(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value;
		dto.RawId = new Ref<tstRaw>(entity.RawId);
		// Navigation properties
		return dto;
	}
	public async Task<tstOptionalSharedRef> ToDTO(tstIOptionalSharedRefDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstOptionalSharedRef);
			return copy;
		}
		var entity = entityInterface as tstOptionalSharedRefDbEntity;
		if (entity == null ) return null;
		var dto = new tstOptionalSharedRef(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value;
		dto.RawId = new Ref<tstRaw>(entity.RawId ?? Guid.Empty);
		// Navigation properties
		return dto;
	}
	public async Task<tstCompositeRefParent> ToDTO(tstICompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstCompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstCompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstCompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value ?? "";
		dto.Composite = await ToDTO(entity.Composite);
		// Navigation properties
		return dto;
	}
	public async Task<tstOptionalCompositeRefParent> ToDTO(tstIOptionalCompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstOptionalCompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstOptionalCompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstOptionalCompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Composite = await ToDTO(entity.Composite);
		// Navigation properties
		return dto;
	}
	public async Task<tstOwnerContainer> ToDTO(tstIOwnerContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstOwnerContainer);
			return copy;
		}
		var entity = entityInterface as tstOwnerContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstOwnerContainer(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Index = entity.Index;
		dto.RawIds = new RefSet<tstRaw>(Assorted.ConvertOwnedRelationship(entity.Raws));
		// Navigation properties
		return dto;
	}
	public async Task<tstCompositesContainer> ToDTO(tstICompositesContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstCompositesContainer);
			return copy;
		}
		var entity = entityInterface as tstCompositesContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstCompositesContainer(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Index = entity.Index;
		dto.Composites = await Assorted.ConvertCompositeRelationship(entity.Composites, ToDTO);
		// Navigation properties
		return dto;
	}
	public async Task<tstSharedContainer> ToDTO(tstISharedContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstSharedContainer);
			return copy;
		}
		var entity = entityInterface as tstSharedContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstSharedContainer(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.SharedIds = new RefSet<tstRaw>(Assorted.ConvertSharedRelationship(entity.Shareds));
		// Navigation properties
		return dto;
	}
	public async Task<tstMultipleSharedContainer> ToDTO(tstIMultipleSharedContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstMultipleSharedContainer);
			return copy;
		}
		var entity = entityInterface as tstMultipleSharedContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstMultipleSharedContainer(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.FirstSharedIds = new RefSet<tstRaw>(Assorted.ConvertSharedRelationship(entity.FirstShareds));
		dto.SecondSharedIds = new RefSet<tstRaw>(Assorted.ConvertSharedRelationship(entity.SecondShareds));
		// Navigation properties
		return dto;
	}
	public async Task<tstMixedContainer> ToDTO(tstIMixedContainerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstMixedContainer);
			return copy;
		}
		var entity = entityInterface as tstMixedContainerDbEntity;
		if (entity == null ) return null;
		var dto = new tstMixedContainer(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.OwnedIds = new RefSet<tstRaw>(Assorted.ConvertOwnedRelationship(entity.Owneds));
		dto.SharedIds = new RefSet<tstRaw>(Assorted.ConvertSharedRelationship(entity.Shareds));
		// Navigation properties
		return dto;
	}
	public async Task<tstMultipleCompositeRef> ToDTO(tstIMultipleCompositeRefDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstMultipleCompositeRef);
			return copy;
		}
		var entity = entityInterface as tstMultipleCompositeRefDbEntity;
		if (entity == null ) return null;
		var dto = new tstMultipleCompositeRef(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Composite = await ToDTO(entity.Composite);
		dto.OptionalComposite = await ToDTO(entity.OptionalComposite);
		// Navigation properties
		return dto;
	}
	public async Task<tstMultipleSharedRef> ToDTO(tstIMultipleSharedRefDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstMultipleSharedRef);
			return copy;
		}
		var entity = entityInterface as tstMultipleSharedRefDbEntity;
		if (entity == null ) return null;
		var dto = new tstMultipleSharedRef(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.RawId = new Ref<tstRaw>(entity.RawId);
		dto.OptionalRawId = new Ref<tstRaw>(entity.OptionalRawId ?? Guid.Empty);
		// Navigation properties
		return dto;
	}
	public async Task<tstNestedCompositeRoot> ToDTO(tstINestedCompositeRootDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstNestedCompositeRoot);
			return copy;
		}
		var entity = entityInterface as tstNestedCompositeRootDbEntity;
		if (entity == null ) return null;
		var dto = new tstNestedCompositeRoot(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Composite = await ToDTO(entity.Composite);
		dto.OptionalComposite = await ToDTO(entity.OptionalComposite);
		dto.Nested = await ToDTO(entity.Nested);
		dto.OptionalRawId = new Ref<tstRaw>(entity.OptionalRawId ?? Guid.Empty);
		dto.RawListIds = new RefList<tstRaw>(Ordered.ConvertSharedRelationship(entity.RawLists));
		// Navigation properties
		return dto;
	}
	public async Task<tstChild> ToDTO(tstIChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstChild);
			return copy;
		}
		var entity = entityInterface as tstChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstChild(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.SecondParentId = new Ref<tstParent>(entity.SecondParentId);
		// Navigation properties
		// Back reference for tstParent.ChildrenIds, ordered
		return dto;
	}
	public async Task<tstParent> ToDTO(tstIParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstParent);
			return copy;
		}
		var entity = entityInterface as tstParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.ChildrenIds = new RefList<tstChild>(Ordered.ConvertOwnedRelationship(entity.Children));
		// Navigation properties
		// Back relationship for tstChild.SecondParentId, ref
		return dto;
	}
	public async Task<tstT001Child> ToDTO(tstIT001ChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT001Child);
			return copy;
		}
		var entity = entityInterface as tstT001ChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstT001Child(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.CompositeChild = await ToDTO(entity.CompositeChild);
		// Navigation properties
		// Back reference for tstT001ParentOwner.T001ChildrenIds, assorted
		return dto;
	}
	public async Task<tstT001ParentOwner> ToDTO(tstIT001ParentOwnerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT001ParentOwner);
			return copy;
		}
		var entity = entityInterface as tstT001ParentOwnerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT001ParentOwner(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.T001ChildrenIds = new RefSet<tstT001Child>(Assorted.ConvertOwnedRelationship(entity.T001Children));
		// Navigation properties
		return dto;
	}
	public async Task<tstParentWithSharedList> ToDTO(tstIParentWithSharedListDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstParentWithSharedList);
			return copy;
		}
		var entity = entityInterface as tstParentWithSharedListDbEntity;
		if (entity == null ) return null;
		var dto = new tstParentWithSharedList(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.RawListIds = new RefList<tstRaw>(Ordered.ConvertSharedRelationship(entity.RawLists));
		// Navigation properties
		return dto;
	}
	public async Task<tstT002Child> ToDTO(tstIT002ChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT002Child);
			return copy;
		}
		var entity = entityInterface as tstT002ChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstT002Child(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Name = entity.Name ?? "";
		// Navigation properties
		// Back reference for tstT002ParentOwner.T002ChildrenIds, ordered
		// Back relationship for tstT002ChildHolder.T002ChildId, ref
		return dto;
	}
	public async Task<tstT002ParentOwner> ToDTO(tstIT002ParentOwnerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT002ParentOwner);
			return copy;
		}
		var entity = entityInterface as tstT002ParentOwnerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT002ParentOwner(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Iteration = entity.Iteration;
		dto.T002ChildrenIds = new RefList<tstT002Child>(Ordered.ConvertOwnedRelationship(entity.T002Children));
		// Navigation properties
		return dto;
	}
	public async Task<tstT002ChildHolder> ToDTO(tstIT002ChildHolderDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT002ChildHolder);
			return copy;
		}
		var entity = entityInterface as tstT002ChildHolderDbEntity;
		if (entity == null ) return null;
		var dto = new tstT002ChildHolder(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Iteration = entity.Iteration;
		dto.T002ChildId = new Ref<tstT002Child>(entity.T002ChildId ?? Guid.Empty);
		// Navigation properties
		return dto;
	}
	public async Task<tstT003Child> ToDTO(tstIT003ChildDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT003Child);
			return copy;
		}
		var entity = entityInterface as tstT003ChildDbEntity;
		if (entity == null ) return null;
		var dto = new tstT003Child(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Name = entity.Name ?? "";
		// Navigation properties
		// Back reference for tstT003ParentOwner.T003ChildrenIds, ordered
		// Back relationship for tstT003ChildHolder.T003ChildId, ref
		return dto;
	}
	public async Task<tstT003ParentOwner> ToDTO(tstIT003ParentOwnerDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT003ParentOwner);
			return copy;
		}
		var entity = entityInterface as tstT003ParentOwnerDbEntity;
		if (entity == null ) return null;
		var dto = new tstT003ParentOwner(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Iteration = entity.Iteration;
		dto.T003ChildrenIds = new RefList<tstT003Child>(Ordered.ConvertOwnedRelationship(entity.T003Children));
		// Navigation properties
		return dto;
	}
	public async Task<tstT003ChildHolder> ToDTO(tstIT003ChildHolderDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT003ChildHolder);
			return copy;
		}
		var entity = entityInterface as tstT003ChildHolderDbEntity;
		if (entity == null ) return null;
		var dto = new tstT003ChildHolder(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Iteration = entity.Iteration;
		dto.T003ChildId = new Ref<tstT003Child>(entity.T003ChildId ?? Guid.Empty);
		// Navigation properties
		return dto;
	}
	public async Task<tstT004RecursiveLinkSet> ToDTO(tstIT004RecursiveLinkSetDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT004RecursiveLinkSet);
			return copy;
		}
		var entity = entityInterface as tstT004RecursiveLinkSetDbEntity;
		if (entity == null ) return null;
		var dto = new tstT004RecursiveLinkSet(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.RecursiveLinkIds = new RefSet<tstT004RecursiveLinkSet>(Assorted.ConvertSharedRelationship(entity.RecursiveLinks));
		// Navigation properties
		// No back relationship for tstT004RecursiveLinkSet.RecursiveLinkIds, shared
		return dto;
	}
	public async Task<tstT005RecursiveLinkList> ToDTO(tstIT005RecursiveLinkListDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT005RecursiveLinkList);
			return copy;
		}
		var entity = entityInterface as tstT005RecursiveLinkListDbEntity;
		if (entity == null ) return null;
		var dto = new tstT005RecursiveLinkList(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.RecursiveLinkIds = new RefList<tstT005RecursiveLinkList>(Ordered.ConvertSharedRelationship(entity.RecursiveLinks));
		// Navigation properties
		// No back relationship for tstT005RecursiveLinkList.RecursiveLinkIds, shared
		return dto;
	}
	public async Task<tstT006PerfMaxQueryItem> ToDTO(tstIT006PerfMaxQueryItemDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT006PerfMaxQueryItem);
			return copy;
		}
		var entity = entityInterface as tstT006PerfMaxQueryItemDbEntity;
		if (entity == null ) return null;
		var dto = new tstT006PerfMaxQueryItem(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value;
		// Navigation properties
		return dto;
	}
	public async Task<tstT006PerfMaxQueryValue> ToDTO(tstIT006PerfMaxQueryValueDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT006PerfMaxQueryValue);
			return copy;
		}
		var entity = entityInterface as tstT006PerfMaxQueryValueDbEntity;
		if (entity == null ) return null;
		var dto = new tstT006PerfMaxQueryValue(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value;
		// Navigation properties
		return dto;
	}
	public async Task<tstT007Leaf> ToDTO(tstIT007LeafDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT007Leaf);
			return copy;
		}
		var entity = entityInterface as tstT007LeafDbEntity;
		if (entity == null ) return null;
		var dto = new tstT007Leaf(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.T007LeafIds = new RefList<tstT007Leaf>(Ordered.ConvertOwnedRelationship(entity.T007Leaves));
		// Navigation properties
		// Back reference for tstT007Leaf.T007LeafIds, ordered
		// Back reference for tstT007Root.T007LeafIds, ordered
		return dto;
	}
	public async Task<tstT007Root> ToDTO(tstIT007RootDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT007Root);
			return copy;
		}
		var entity = entityInterface as tstT007RootDbEntity;
		if (entity == null ) return null;
		var dto = new tstT007Root(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.T007LeafIds = new RefList<tstT007Leaf>(Ordered.ConvertOwnedRelationship(entity.T007Leaves));
		// Navigation properties
		return dto;
	}
	public async Task<tstT008Parent> ToDTO(tstIT008ParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT008Parent);
			return copy;
		}
		var entity = entityInterface as tstT008ParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstT008Parent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Child = await ToDTO(entity.Child);
		dto.RawId = new Ref<tstRaw>(entity.RawId);
		// Navigation properties
		return dto;
	}
	public async Task<tstT009Principal> ToDTO(tstIT009PrincipalDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT009Principal);
			return copy;
		}
		var entity = entityInterface as tstT009PrincipalDbEntity;
		if (entity == null ) return null;
		var dto = new tstT009Principal(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Value = entity.Value;
		dto.Composite = await ToDTO(entity.Composite);
		dto.T009Composites = await Ordered.ConvertCompositeRelationship(entity.T009Composites, (e) => e.IndexInT009Principal, ToDTO);
		// Navigation properties
		// Back relationship for tstT009User.PrincipalId, ref
		return dto;
	}
	public async Task<tstT009User> ToDTO(tstIT009UserDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT009User);
			return copy;
		}
		var entity = entityInterface as tstT009UserDbEntity;
		if (entity == null ) return null;
		var dto = new tstT009User(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.PrincipalId = new Ref<tstT009Principal>(entity.PrincipalId);
		// Navigation properties
		return dto;
	}
	public async Task<tstT010CompositeRefParent> ToDTO(tstIT010CompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT010CompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstT010CompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstT010CompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.T010CompositeRefChildren = await Ordered.ConvertCompositeRelationship(entity.T010CompositeRefChildren, (e) => e.IndexInT010CompositeRefParent, ToDTO);
		dto.T010CompositeRefChild = await ToDTO(entity.T010CompositeRefChild);
		// Navigation properties
		return dto;
	}
	public async Task<tstT011CompositeRefParent> ToDTO(tstIT011CompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT011CompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstT011CompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstT011CompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Container = await ToDTO(entity.Container);
		// Navigation properties
		return dto;
	}
	public async Task<tstT012CompositeRefParent> ToDTO(tstIT012CompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT012CompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstT012CompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstT012CompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Container = await ToDTO(entity.Container);
		// Navigation properties
		return dto;
	}
	public async Task<tstT013CompositeRefParent> ToDTO(tstIT013CompositeRefParentDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT013CompositeRefParent);
			return copy;
		}
		var entity = entityInterface as tstT013CompositeRefParentDbEntity;
		if (entity == null ) return null;
		var dto = new tstT013CompositeRefParent(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.Container = await ToDTO(entity.Container);
		// Navigation properties
		return dto;
	}
	public async Task<tstT014AutoCreateValue> ToDTO(tstIT014AutoCreateValueDbEntity entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT014AutoCreateValue);
			return copy;
		}
		var entity = entityInterface as tstT014AutoCreateValueDbEntity;
		if (entity == null ) return null;
		var dto = new tstT014AutoCreateValue(EntityCreationContext.Mapper);
		dto.Id = entity.Id;
		dto.IsSystem = entity.IsSystem;
		dto.Revision = entity.Revision;
		dto.DateCreated = entity.DateCreated.FromDBasUTC();
		dto.DateUpdated = entity.DateUpdated.FromDBasUTC();
		dto.ReferenceId = new Ref<tstRaw>(entity.ReferenceId);
		dto.BooleanValue1 = entity.BooleanValue1;
		dto.BooleanValue2 = entity.BooleanValue2;
		dto.IntValue = entity.IntValue;
		dto.DecimalValue = entity.DecimalValue;
		dto.EnumValue = entity.EnumValue;
		// Navigation properties
		return dto;
	}
	public async Task<tstT015ParentRecord> ToDTO(tstIT015ParentRecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015ParentRecord);
			return copy;
		}
		var entity = entityInterface as tstT015ParentRecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015ParentRecord();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ParentValue = entity.ParentValue;
		dto.Comments = entity.Comments ?? "";
		dto.OptionalChildId = new RecordRef<tstT015ChildL1Record>(entity.OptionalChildId ?? 0);
		dto.RequiredChildId = new RecordRef<tstT015ChildL1Record>(entity.RequiredChildId);
		dto.ChildrenIds = new RecordRefSet<tstT015ChildL1Record>(Assorted.ConvertSharedRecordRelationship(entity.Children));
		dto.OptionalCompositeChild = await ToDTO(entity.OptionalCompositeChild);
		dto.RequiredCompositeChild = await ToDTO(entity.RequiredCompositeChild);
		dto.CompositeChildren = await Assorted.ConvertCompositeRecordRelationship(entity.CompositeChildren, ToDTO);
		// Navigation properties
		return dto;
	}
	public async Task<tstT015ChildL1Record> ToDTO(tstIT015ChildL1RecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015ChildL1Record);
			return copy;
		}
		var entity = entityInterface as tstT015ChildL1RecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015ChildL1Record();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ChildL1Value = entity.ChildL1Value;
		dto.Comments = entity.Comments ?? "";
		dto.OptionalChildId = new RecordRef<tstT015ChildL2Record>(entity.OptionalChildId ?? 0);
		dto.RequiredChildId = new RecordRef<tstT015ChildL2Record>(entity.RequiredChildId);
		dto.ChildrenIds = new RecordRefSet<tstT015ChildL2Record>(Assorted.ConvertSharedRecordRelationship(entity.Children));
		// Navigation properties
		return dto;
	}
	public async Task<tstT015ChildL2Record> ToDTO(tstIT015ChildL2RecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015ChildL2Record);
			return copy;
		}
		var entity = entityInterface as tstT015ChildL2RecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015ChildL2Record();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ChildL2Value = entity.ChildL2Value;
		dto.Comments = entity.Comments ?? "";
		// Navigation properties
		return dto;
	}
	public async Task<tstT015ChildOwnedRecord> ToDTO(tstIT015ChildOwnedRecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015ChildOwnedRecord);
			return copy;
		}
		var entity = entityInterface as tstT015ChildOwnedRecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015ChildOwnedRecord();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ChildL2Value = entity.ChildL2Value;
		dto.Comments = entity.Comments ?? "";
		// Navigation properties
		return dto;
	}
	public async Task<tstT015ParentOrderedRecord> ToDTO(tstIT015ParentOrderedRecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT015ParentOrderedRecord);
			return copy;
		}
		var entity = entityInterface as tstT015ParentOrderedRecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT015ParentOrderedRecord();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ParentValue = entity.ParentValue;
		dto.Comments = entity.Comments ?? "";
		dto.OrderedOwnedChildrenIds = new RecordRefList<tstT015ChildOwnedRecord>(Ordered.ConvertSharedRecordRelationship(entity.OrderedOwnedChildren));
		dto.OrderedChildrenIds = new RecordRefList<tstT015ChildL1Record>(Ordered.ConvertSharedRecordRelationship(entity.OrderedChildren));
		dto.CompositeOderedChildren = await Ordered.ConvertCompositeRecordRelationship(entity.CompositeOderedChildren, (e) => e.IndexInT015ParentOrderedRecord, ToDTO);
		// Navigation properties
		return dto;
	}
	public async Task<tstT016CompositeParentRecord> ToDTO(tstIT016CompositeParentRecordDbRecord entityInterface)
	{
		if (entityInterface is IEntityAdapter adapter)
		{
			var copy = JsonConvertTyped.Copy(adapter.Source as tstT016CompositeParentRecord);
			return copy;
		}
		var entity = entityInterface as tstT016CompositeParentRecordDbRecord;
		if (entity == null ) return null;
		var dto = new tstT016CompositeParentRecord();
		dto.Id = entity.Id;
		dto.Revision = entity.Revision;
		dto.ParentValue = entity.ParentValue;
		dto.Comments = entity.Comments ?? "";
		dto.Children = await Assorted.ConvertCompositeRecordRelationship(entity.Children, ToDTO);
		// Navigation properties
		return dto;
	}
}
#pragma warning restore CS0612 // Type or member is obsolete
#pragma warning restore CS0105 // Using directive appeared previously in this namespace
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning restore IDE0028 // Collection Initialization
#pragma warning restore IDE0017 // Object Initialization
#pragma warning restore IDE1006 // Naming Styles
}
