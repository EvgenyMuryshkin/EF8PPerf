namespace test.mapper
{
// autogenerated by ServerMapperGenerator
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable IDE0017 // Object Initialization
#pragma warning disable IDE0028 // Collection Initialization
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning disable CS0105 // Using directive appeared previously in this namespace
#pragma warning disable CS0612 // Type or member is obsolete
using crosscutting;
using crosscutting.sql;
using crosscutting.cqrs;
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Linq;
using shared.sql;
	using test.model;
	using test.sql;
	using test.model;
// generated class, do not modify, source here: file:///placeholder
public partial class tstTestDBContextCRUD
{
	public async Task DeleteCompositeDbEntity(tstICompositeChildDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstCompositeChild entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstINestedCompositesDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
		await DeleteCompositeRelationship(entity.Children, DeleteCompositeDbEntity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstNestedComposites entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstIT009CompositeDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT009Composite entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstIT010CompositeRefChildDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT010CompositeRefChild entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstIT011CompositeRefParentContainerDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
		await DeleteCompositeRelationship(entity.CompositeChildren, DeleteCompositeDbEntity);
		await DeleteCompositeDbEntity(entity.CompositeChild);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT011CompositeRefParentContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstIT012CompositeRefParentContainerDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.CompositeChild);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT012CompositeRefParentContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbEntity(tstIT013CompositeRefParentContainerDbEntity entity)
	{
		if (entity == null ) return;
		RemoveDbEntity(entity);
		await DeleteCompositeRelationship(entity.CompositeChildren, DeleteCompositeDbEntity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT013CompositeRefParentContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbEntity(ctx, entity, null);
		await DeleteCompositeDbEntity(dbEntity);
	}
	public async Task DeleteCompositeDbRecord(tstIT015CompositeChildDbRecord entity)
	{
		if (entity == null ) return;
		RemoveDbRecord(entity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT015CompositeChild entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbRecord(ctx, entity, null);
		await DeleteCompositeDbRecord(dbEntity);
	}
	public async Task DeleteCompositeDbRecord(tstIT016CompositeChildRecordDbRecord entity)
	{
		if (entity == null ) return;
		RemoveDbRecord(entity);
	}
	public async Task DeleteComposite(EntityMapperOperationContext ctx, tstT016CompositeChildRecord entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateCompositeDbRecord(ctx, entity, null);
		await DeleteCompositeDbRecord(dbEntity);
	}
	public async Task DeleteDbEntity(tstIRawDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.RawsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstRaw entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIRequiredSharedRefDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.RequiredSharedRefsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstRequiredSharedRef entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIOptionalSharedRefDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.OptionalSharedRefsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstOptionalSharedRef entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstICompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.CompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstCompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIOptionalCompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.OptionalCompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstOptionalCompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIOwnerContainerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.OwnerContainersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.Raws);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstOwnerContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstICompositesContainerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.CompositesContainersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeRelationship(entity.Composites, DeleteCompositeDbEntity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstCompositesContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstISharedContainerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.SharedContainersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.Shareds);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstSharedContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIMultipleSharedContainerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.MultipleSharedContainersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.FirstShareds);
		RemoveLinks(entity.SecondShareds);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstMultipleSharedContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIMixedContainerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.MixedContainersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.Owneds);
		RemoveLinks(entity.Shareds);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstMixedContainer entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIMultipleCompositeRefDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.MultipleCompositeRefsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
		await DeleteCompositeDbEntity(entity.OptionalComposite);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstMultipleCompositeRef entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIMultipleSharedRefDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.MultipleSharedRefsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstMultipleSharedRef entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstINestedCompositeRootDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.NestedCompositeRootsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.RawLists);
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
		await DeleteCompositeDbEntity(entity.OptionalComposite);
		await DeleteCompositeDbEntity(entity.Nested);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstNestedCompositeRoot entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIChildDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.ChildrenInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstChild entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.ParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.Children);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT001ChildDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T001ChildrenInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.CompositeChild);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT001Child entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT001ParentOwnerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T001ParentOwnersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.T001Children);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT001ParentOwner entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIParentWithSharedListDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.ParentWithSharedListsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.RawLists);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstParentWithSharedList entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT002ChildDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T002ChildrenInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT002Child entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT002ParentOwnerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T002ParentOwnersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.T002Children);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT002ParentOwner entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT002ChildHolderDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T002ChildHoldersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT002ChildHolder entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT003ChildDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T003ChildrenInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT003Child entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT003ParentOwnerDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T003ParentOwnersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.T003Children);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT003ParentOwner entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT003ChildHolderDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T003ChildHoldersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT003ChildHolder entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT004RecursiveLinkSetDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T004RecursiveLinkSetsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.RecursiveLinks);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT004RecursiveLinkSet entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT005RecursiveLinkListDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T005RecursiveLinkListsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.RecursiveLinks);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT005RecursiveLinkList entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT006PerfMaxQueryItemDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T006PerfMaxQueryItemsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT006PerfMaxQueryItem entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT006PerfMaxQueryValueDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T006PerfMaxQueryValuesInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT006PerfMaxQueryValue entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT007LeafDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T007LeavesInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.T007Leaves);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT007Leaf entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT007RootDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T007RootsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveLinks(entity.T007Leaves);
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT007Root entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT008ParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T008ParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Child);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT008Parent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT009PrincipalDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T009PrincipalsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Composite);
		await DeleteCompositeRelationship(entity.T009Composites, DeleteCompositeDbEntity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT009Principal entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT009UserDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T009UsersInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT009User entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT010CompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T010CompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeRelationship(entity.T010CompositeRefChildren, DeleteCompositeDbEntity);
		await DeleteCompositeDbEntity(entity.T010CompositeRefChild);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT010CompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT011CompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T011CompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Container);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT011CompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT012CompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T012CompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Container);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT012CompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT013CompositeRefParentDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T013CompositeRefParentsInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
		await DeleteCompositeDbEntity(entity.Container);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT013CompositeRefParent entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbEntity(tstIT014AutoCreateValueDbEntity entity)
	{
		if (entity == null ) return;
		if (Context.T014AutoCreateValuesInMemory != null)
		{
			RemoveDbEntity(entity);
			return;
		}
		RemoveDbEntity(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT014AutoCreateValue entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbEntity(ctx, entity, null);
		await DeleteDbEntity(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT015ParentRecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T015ParentRecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
		await DeleteCompositeDbRecord(entity.OptionalCompositeChild);
		await DeleteCompositeDbRecord(entity.RequiredCompositeChild);
		await DeleteCompositeRecordRelationship(entity.CompositeChildren, DeleteCompositeDbRecord);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT015ParentRecord entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT015ChildL1RecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T015ChildL1RecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT015ChildL1Record entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT015ChildL2RecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T015ChildL2RecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT015ChildL2Record entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT015ChildOwnedRecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T015ChildOwnedRecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT015ChildOwnedRecord entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT015ParentOrderedRecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T015ParentOrderedRecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
		await DeleteCompositeRecordRelationship(entity.CompositeOderedChildren, DeleteCompositeDbRecord);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT015ParentOrderedRecord entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
	public async Task DeleteDbRecord(tstIT016CompositeParentRecordDbRecord entity)
	{
		if (entity == null ) return;
		if (Context.T016CompositeParentRecordsInMemory != null)
		{
			RemoveDbRecord(entity);
			return;
		}
		RemoveDbRecord(entity);
		await DeleteCompositeRecordRelationship(entity.Children, DeleteCompositeDbRecord);
	}
	public async Task Delete(EntityMapperOperationContext ctx, tstT016CompositeParentRecord entity)
	{
		// TODO: do not convert to entity
		var dbEntity = await UpdateDbRecord(ctx, entity, null);
		await DeleteDbRecord(dbEntity);
	}
}
#pragma warning restore CS0612 // Type or member is obsolete
#pragma warning restore CS0105 // Using directive appeared previously in this namespace
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning restore IDE0028 // Collection Initialization
#pragma warning restore IDE0017 // Object Initialization
#pragma warning restore IDE1006 // Naming Styles
}
