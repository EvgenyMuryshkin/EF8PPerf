namespace test.mapper
{
// autogenerated by ServerMapperGenerator
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable IDE0017 // Object Initialization
#pragma warning disable IDE0028 // Collection Initialization
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning disable CS0105 // Using directive appeared previously in this namespace
#pragma warning disable CS0612 // Type or member is obsolete
using crosscutting;
using crosscutting.sql;
using crosscutting.cqrs;
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Linq;
using shared.sql;
	using test.model;
	using test.sql;
	using test.model;
// generated class, do not modify, source here: file:///placeholder
public partial class tstTestDBContextCRUD
{
	public async Task<tstCompositeChildDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstCompositeChild dto, tstCompositeChildDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.Value = Validation.ToValidString(dto.Value);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstNestedCompositesDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstNestedComposites dto, tstNestedCompositesDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.RequiredDbEntityId(entity.Composite, "tstNestedComposites.Composite");
		entity.Children = await Ordered
			.ReconstructCompositeRelationship(
				ctx,
				entity.Children,
				dto.Children,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => e.IndexInNestedComposites,
				(e, idx) => { if (e.IndexInNestedComposites != idx || e.NestedCompositesId != entity.Id) { e.IndexInNestedComposites = idx; e.NestedCompositesId = entity.Id; return true; } return false; });
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT009CompositeDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstT009Composite dto, tstT009CompositeDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.Value = dto.Value;
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT010CompositeRefChildDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstT010CompositeRefChild dto, tstT010CompositeRefChildDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.Value = Validation.ToValidString(dto.Value);
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstT010CompositeRefChild.RawId");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT011CompositeRefParentContainerDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstT011CompositeRefParentContainer dto, tstT011CompositeRefParentContainerDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.CompositeChildren = await Ordered
			.ReconstructCompositeRelationship(
				ctx,
				entity.CompositeChildren,
				dto.CompositeChildren,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => e.IndexInT011CompositeRefParentContainer,
				(e, idx) => { if (e.IndexInT011CompositeRefParentContainer != idx || e.T011CompositeRefParentContainerId != entity.Id) { e.IndexInT011CompositeRefParentContainer = idx; e.T011CompositeRefParentContainerId = entity.Id; return true; } return false; });
		entity.CompositeChild = await UpdateCompositeDbEntity(ctx, dto.CompositeChild, entity.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredDbEntityId(entity.CompositeChild, "tstT011CompositeRefParentContainer.CompositeChild");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT012CompositeRefParentContainerDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstT012CompositeRefParentContainer dto, tstT012CompositeRefParentContainerDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.CompositeChild = await UpdateCompositeDbEntity(ctx, dto.CompositeChild, entity.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredDbEntityId(entity.CompositeChild, "tstT012CompositeRefParentContainer.CompositeChild");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT013CompositeRefParentContainerDbEntity> UpdateCompositeDbEntity(EntityMapperOperationContext ctx, tstT013CompositeRefParentContainer dto, tstT013CompositeRefParentContainerDbEntity existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbEntity(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.CompositeChildren = await Ordered
			.ReconstructCompositeRelationship(
				ctx,
				entity.CompositeChildren,
				dto.CompositeChildren,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => e.IndexInT013CompositeRefParentContainer,
				(e, idx) => { if (e.IndexInT013CompositeRefParentContainer != idx || e.T013CompositeRefParentContainerId != entity.Id) { e.IndexInT013CompositeRefParentContainer = idx; e.T013CompositeRefParentContainerId = entity.Id; return true; } return false; });
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstT015CompositeChildDbRecord> UpdateCompositeDbRecord(EntityMapperOperationContext ctx, tstT015CompositeChild dto, tstT015CompositeChildDbRecord existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbRecord(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.ChildL1Value = dto.ChildL1Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstT016CompositeChildRecordDbRecord> UpdateCompositeDbRecord(EntityMapperOperationContext ctx, tstT016CompositeChildRecord dto, tstT016CompositeChildRecordDbRecord existing)
	{
		if (dto == null && existing != null) await DeleteCompositeDbRecord(existing);
		if (dto == null) return null;
		if (existing == null) return await CreateFromDTO(ctx, dto);
		var entity = existing;
		var context = Context as tstTestDBContext;
		// do not check for same object id for composite entities
		entity.ChildValue = dto.ChildValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIRawDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstRaw dto, tstIRawDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.RawsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.RawsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstRawDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.Raws.LocalView, Context.RawsWithComposites)) as tstRawDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstRawDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Index = dto.Index;
		entity.DateTime = dto.DateTime;
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIRequiredSharedRefDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstRequiredSharedRef dto, tstIRequiredSharedRefDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.RequiredSharedRefsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.RequiredSharedRefsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstRequiredSharedRefDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.RequiredSharedRefs.LocalView, Context.RequiredSharedRefsWithComposites)) as tstRequiredSharedRefDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstRequiredSharedRefDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = dto.Value;
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstRequiredSharedRef.RawId");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIOptionalSharedRefDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstOptionalSharedRef dto, tstIOptionalSharedRefDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.OptionalSharedRefsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.OptionalSharedRefsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstOptionalSharedRefDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.OptionalSharedRefs.LocalView, Context.OptionalSharedRefsWithComposites)) as tstOptionalSharedRefDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstOptionalSharedRefDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = dto.Value;
		entity.RawId = IdResolvers.OptionalReferenceId(dto.RawId);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstICompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstCompositeRefParent dto, tstICompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.CompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.CompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstCompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.CompositeRefParents.LocalView, Context.CompositeRefParentsWithComposites)) as tstCompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstCompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = Validation.ToValidString(dto.Value);
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.RequiredDbEntityId(entity.Composite, "tstCompositeRefParent.Composite");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIOptionalCompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstOptionalCompositeRefParent dto, tstIOptionalCompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.OptionalCompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.OptionalCompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstOptionalCompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.OptionalCompositeRefParents.LocalView, Context.OptionalCompositeRefParentsWithComposites)) as tstOptionalCompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstOptionalCompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.OptionalDbEntityId(entity.Composite);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIOwnerContainerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstOwnerContainer dto, tstIOwnerContainerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.OwnerContainersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.OwnerContainersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstOwnerContainerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.OwnerContainers.LocalView, Context.OwnerContainersWithComposites)) as tstOwnerContainerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstOwnerContainerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Index = dto.Index;
		await Assorted.ReconstructOwnedRelationsip(context.tstOwnerContainer_tstRaw_Raws, entity, 0, entity.Raws, dto.RawIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstICompositesContainerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstCompositesContainer dto, tstICompositesContainerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.CompositesContainersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.CompositesContainersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstCompositesContainerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.CompositesContainers.LocalView, Context.CompositesContainersWithComposites)) as tstCompositesContainerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstCompositesContainerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Index = dto.Index;
		entity.Composites = await Assorted
			.ReconstructCompositeRelationship(
				ctx,
				entity.Composites,
				dto.Composites,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => { if (e.CompositesContainerId != entity.Id) { e.CompositesContainerId = entity.Id; return true; } return false; });
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstISharedContainerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstSharedContainer dto, tstISharedContainerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.SharedContainersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.SharedContainersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstSharedContainerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.SharedContainers.LocalView, Context.SharedContainersWithComposites)) as tstSharedContainerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstSharedContainerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Assorted.ReconstructSharedRelationship(entity, 0, entity.Shareds, dto.SharedIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIMultipleSharedContainerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstMultipleSharedContainer dto, tstIMultipleSharedContainerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.MultipleSharedContainersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.MultipleSharedContainersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstMultipleSharedContainerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.MultipleSharedContainers.LocalView, Context.MultipleSharedContainersWithComposites)) as tstMultipleSharedContainerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstMultipleSharedContainerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Assorted.ReconstructSharedRelationship(entity, 0, entity.FirstShareds, dto.FirstSharedIds);
		await Assorted.ReconstructSharedRelationship(entity, 0, entity.SecondShareds, dto.SecondSharedIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIMixedContainerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstMixedContainer dto, tstIMixedContainerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.MixedContainersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.MixedContainersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstMixedContainerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.MixedContainers.LocalView, Context.MixedContainersWithComposites)) as tstMixedContainerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstMixedContainerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Assorted.ReconstructOwnedRelationsip(context.tstMixedContainer_tstRaw_Owneds, entity, 0, entity.Owneds, dto.OwnedIds);
		await Assorted.ReconstructSharedRelationship(entity, 0, entity.Shareds, dto.SharedIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIMultipleCompositeRefDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstMultipleCompositeRef dto, tstIMultipleCompositeRefDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.MultipleCompositeRefsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.MultipleCompositeRefsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstMultipleCompositeRefDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.MultipleCompositeRefs.LocalView, Context.MultipleCompositeRefsWithComposites)) as tstMultipleCompositeRefDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstMultipleCompositeRefDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.RequiredDbEntityId(entity.Composite, "tstMultipleCompositeRef.Composite");
		entity.OptionalComposite = await UpdateCompositeDbEntity(ctx, dto.OptionalComposite, entity.OptionalComposite);
		entity.OptionalCompositeId = IdResolvers.OptionalDbEntityId(entity.OptionalComposite);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIMultipleSharedRefDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstMultipleSharedRef dto, tstIMultipleSharedRefDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.MultipleSharedRefsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.MultipleSharedRefsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstMultipleSharedRefDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.MultipleSharedRefs.LocalView, Context.MultipleSharedRefsWithComposites)) as tstMultipleSharedRefDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstMultipleSharedRefDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstMultipleSharedRef.RawId");
		entity.OptionalRawId = IdResolvers.OptionalReferenceId(dto.OptionalRawId);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstINestedCompositeRootDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstNestedCompositeRoot dto, tstINestedCompositeRootDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.NestedCompositeRootsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.NestedCompositeRootsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstNestedCompositeRootDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.NestedCompositeRoots.LocalView, Context.NestedCompositeRootsWithComposites)) as tstNestedCompositeRootDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstNestedCompositeRootDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.RequiredDbEntityId(entity.Composite, "tstNestedCompositeRoot.Composite");
		entity.OptionalComposite = await UpdateCompositeDbEntity(ctx, dto.OptionalComposite, entity.OptionalComposite);
		entity.OptionalCompositeId = IdResolvers.OptionalDbEntityId(entity.OptionalComposite);
		entity.Nested = await UpdateCompositeDbEntity(ctx, dto.Nested, entity.Nested);
		entity.NestedId = IdResolvers.RequiredDbEntityId(entity.Nested, "tstNestedCompositeRoot.Nested");
		entity.OptionalRawId = IdResolvers.OptionalReferenceId(dto.OptionalRawId);
		await Ordered.ReconstructSharedRelationship(entity, 0, entity.RawLists, dto.RawListIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIChildDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstChild dto, tstIChildDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.ChildrenInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.ChildrenInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstChildDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.Children.LocalView, Context.ChildrenWithComposites)) as tstChildDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstChildDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.SecondParentId = IdResolvers.RequiredReferenceId(dto.SecondParentId, "tstChild.SecondParentId");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstParent dto, tstIParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.ParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.ParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.Parents.LocalView, Context.ParentsWithComposites)) as tstParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Ordered.ReconstructOwnedRelationsip(context.tstParent_tstChild_Children, entity, 0, entity.Children, dto.ChildrenIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT001ChildDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT001Child dto, tstIT001ChildDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T001ChildrenInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T001ChildrenInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT001ChildDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T001Children.LocalView, Context.T001ChildrenWithComposites)) as tstT001ChildDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT001ChildDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.CompositeChild = await UpdateCompositeDbEntity(ctx, dto.CompositeChild, entity.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredDbEntityId(entity.CompositeChild, "tstT001Child.CompositeChild");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT001ParentOwnerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT001ParentOwner dto, tstIT001ParentOwnerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T001ParentOwnersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T001ParentOwnersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT001ParentOwnerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T001ParentOwners.LocalView, Context.T001ParentOwnersWithComposites)) as tstT001ParentOwnerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT001ParentOwnerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Assorted.ReconstructOwnedRelationsip(context.tstT001ParentOwner_tstT001Child_T001Children, entity, 0, entity.T001Children, dto.T001ChildrenIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIParentWithSharedListDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstParentWithSharedList dto, tstIParentWithSharedListDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.ParentWithSharedListsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.ParentWithSharedListsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstParentWithSharedListDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.ParentWithSharedLists.LocalView, Context.ParentWithSharedListsWithComposites)) as tstParentWithSharedListDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstParentWithSharedListDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Ordered.ReconstructSharedRelationship(entity, 0, entity.RawLists, dto.RawListIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT002ChildDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT002Child dto, tstIT002ChildDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T002ChildrenInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T002ChildrenInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT002ChildDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T002Children.LocalView, Context.T002ChildrenWithComposites)) as tstT002ChildDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT002ChildDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Name = Validation.ToValidString(dto.Name);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT002ParentOwnerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT002ParentOwner dto, tstIT002ParentOwnerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T002ParentOwnersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T002ParentOwnersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT002ParentOwnerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T002ParentOwners.LocalView, Context.T002ParentOwnersWithComposites)) as tstT002ParentOwnerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT002ParentOwnerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Iteration = dto.Iteration;
		await Ordered.ReconstructOwnedRelationsip(context.tstT002ParentOwner_tstT002Child_T002Children, entity, 0, entity.T002Children, dto.T002ChildrenIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT002ChildHolderDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT002ChildHolder dto, tstIT002ChildHolderDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T002ChildHoldersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T002ChildHoldersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT002ChildHolderDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T002ChildHolders.LocalView, Context.T002ChildHoldersWithComposites)) as tstT002ChildHolderDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT002ChildHolderDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Iteration = dto.Iteration;
		entity.T002ChildId = IdResolvers.OptionalReferenceId(dto.T002ChildId);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT003ChildDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT003Child dto, tstIT003ChildDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T003ChildrenInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T003ChildrenInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT003ChildDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T003Children.LocalView, Context.T003ChildrenWithComposites)) as tstT003ChildDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT003ChildDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Name = Validation.ToValidString(dto.Name);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT003ParentOwnerDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT003ParentOwner dto, tstIT003ParentOwnerDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T003ParentOwnersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T003ParentOwnersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT003ParentOwnerDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T003ParentOwners.LocalView, Context.T003ParentOwnersWithComposites)) as tstT003ParentOwnerDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT003ParentOwnerDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Iteration = dto.Iteration;
		await Ordered.ReconstructOwnedRelationsip(context.tstT003ParentOwner_tstT003Child_T003Children, entity, 0, entity.T003Children, dto.T003ChildrenIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT003ChildHolderDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT003ChildHolder dto, tstIT003ChildHolderDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T003ChildHoldersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T003ChildHoldersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT003ChildHolderDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T003ChildHolders.LocalView, Context.T003ChildHoldersWithComposites)) as tstT003ChildHolderDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT003ChildHolderDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Iteration = dto.Iteration;
		entity.T003ChildId = IdResolvers.OptionalReferenceId(dto.T003ChildId);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT004RecursiveLinkSetDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT004RecursiveLinkSet dto, tstIT004RecursiveLinkSetDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T004RecursiveLinkSetsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T004RecursiveLinkSetsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT004RecursiveLinkSetDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T004RecursiveLinkSets.LocalView, Context.T004RecursiveLinkSetsWithComposites)) as tstT004RecursiveLinkSetDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT004RecursiveLinkSetDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Assorted.ReconstructSharedRelationship(entity, 0, entity.RecursiveLinks, dto.RecursiveLinkIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT005RecursiveLinkListDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT005RecursiveLinkList dto, tstIT005RecursiveLinkListDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T005RecursiveLinkListsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T005RecursiveLinkListsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT005RecursiveLinkListDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T005RecursiveLinkLists.LocalView, Context.T005RecursiveLinkListsWithComposites)) as tstT005RecursiveLinkListDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT005RecursiveLinkListDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Ordered.ReconstructSharedRelationship(entity, 0, entity.RecursiveLinks, dto.RecursiveLinkIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT006PerfMaxQueryItemDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT006PerfMaxQueryItem dto, tstIT006PerfMaxQueryItemDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T006PerfMaxQueryItemsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T006PerfMaxQueryItemsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT006PerfMaxQueryItemDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T006PerfMaxQueryItems.LocalView, Context.T006PerfMaxQueryItemsWithComposites)) as tstT006PerfMaxQueryItemDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT006PerfMaxQueryItemDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = dto.Value;
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT006PerfMaxQueryValueDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT006PerfMaxQueryValue dto, tstIT006PerfMaxQueryValueDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T006PerfMaxQueryValuesInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T006PerfMaxQueryValuesInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT006PerfMaxQueryValueDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T006PerfMaxQueryValues.LocalView, Context.T006PerfMaxQueryValuesWithComposites)) as tstT006PerfMaxQueryValueDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT006PerfMaxQueryValueDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = dto.Value;
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT007LeafDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT007Leaf dto, tstIT007LeafDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T007LeavesInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T007LeavesInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT007LeafDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T007Leaves.LocalView, Context.T007LeavesWithComposites)) as tstT007LeafDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT007LeafDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Ordered.ReconstructOwnedRelationsip(context.tstT007Leaf_tstT007Leaf_T007Leaves, entity, 0, entity.T007Leaves, dto.T007LeafIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT007RootDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT007Root dto, tstIT007RootDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T007RootsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T007RootsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT007RootDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T007Roots.LocalView, Context.T007RootsWithComposites)) as tstT007RootDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT007RootDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		await Ordered.ReconstructOwnedRelationsip(context.tstT007Root_tstT007Leaf_T007Leaves, entity, 0, entity.T007Leaves, dto.T007LeafIds);
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT008ParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT008Parent dto, tstIT008ParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T008ParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T008ParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT008ParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T008Parents.LocalView, Context.T008ParentsWithComposites)) as tstT008ParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT008ParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Child = await UpdateCompositeDbEntity(ctx, dto.Child, entity.Child);
		entity.ChildId = IdResolvers.RequiredDbEntityId(entity.Child, "tstT008Parent.Child");
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstT008Parent.RawId");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT009PrincipalDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT009Principal dto, tstIT009PrincipalDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T009PrincipalsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T009PrincipalsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT009PrincipalDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T009Principals.LocalView, Context.T009PrincipalsWithComposites)) as tstT009PrincipalDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT009PrincipalDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Value = dto.Value;
		entity.Composite = await UpdateCompositeDbEntity(ctx, dto.Composite, entity.Composite);
		entity.CompositeId = IdResolvers.RequiredDbEntityId(entity.Composite, "tstT009Principal.Composite");
		entity.T009Composites = await Ordered
			.ReconstructCompositeRelationship(
				ctx,
				entity.T009Composites,
				dto.T009Composites,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => e.IndexInT009Principal,
				(e, idx) => { if (e.IndexInT009Principal != idx || e.T009PrincipalId != entity.Id) { e.IndexInT009Principal = idx; e.T009PrincipalId = entity.Id; return true; } return false; });
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT009UserDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT009User dto, tstIT009UserDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T009UsersInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T009UsersInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT009UserDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T009Users.LocalView, Context.T009UsersWithComposites)) as tstT009UserDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT009UserDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.PrincipalId = IdResolvers.RequiredReferenceId(dto.PrincipalId, "tstT009User.PrincipalId");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT010CompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT010CompositeRefParent dto, tstIT010CompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T010CompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T010CompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT010CompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T010CompositeRefParents.LocalView, Context.T010CompositeRefParentsWithComposites)) as tstT010CompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT010CompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.T010CompositeRefChildren = await Ordered
			.ReconstructCompositeRelationship(
				ctx,
				entity.T010CompositeRefChildren,
				dto.T010CompositeRefChildren,
				CreateFromDTO,
				UpdateCompositeDbEntity,
				DeleteCompositeDbEntity,
				(e) => e.IndexInT010CompositeRefParent,
				(e, idx) => { if (e.IndexInT010CompositeRefParent != idx || e.T010CompositeRefParentId != entity.Id) { e.IndexInT010CompositeRefParent = idx; e.T010CompositeRefParentId = entity.Id; return true; } return false; });
		entity.T010CompositeRefChild = await UpdateCompositeDbEntity(ctx, dto.T010CompositeRefChild, entity.T010CompositeRefChild);
		entity.T010CompositeRefChildId = IdResolvers.RequiredDbEntityId(entity.T010CompositeRefChild, "tstT010CompositeRefParent.T010CompositeRefChild");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT011CompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT011CompositeRefParent dto, tstIT011CompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T011CompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T011CompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT011CompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T011CompositeRefParents.LocalView, Context.T011CompositeRefParentsWithComposites)) as tstT011CompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT011CompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Container = await UpdateCompositeDbEntity(ctx, dto.Container, entity.Container);
		entity.ContainerId = IdResolvers.RequiredDbEntityId(entity.Container, "tstT011CompositeRefParent.Container");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT012CompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT012CompositeRefParent dto, tstIT012CompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T012CompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T012CompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT012CompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T012CompositeRefParents.LocalView, Context.T012CompositeRefParentsWithComposites)) as tstT012CompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT012CompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Container = await UpdateCompositeDbEntity(ctx, dto.Container, entity.Container);
		entity.ContainerId = IdResolvers.RequiredDbEntityId(entity.Container, "tstT012CompositeRefParent.Container");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT013CompositeRefParentDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT013CompositeRefParent dto, tstIT013CompositeRefParentDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T013CompositeRefParentsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T013CompositeRefParentsInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT013CompositeRefParentDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T013CompositeRefParents.LocalView, Context.T013CompositeRefParentsWithComposites)) as tstT013CompositeRefParentDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT013CompositeRefParentDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.Container = await UpdateCompositeDbEntity(ctx, dto.Container, entity.Container);
		entity.ContainerId = IdResolvers.RequiredDbEntityId(entity.Container, "tstT013CompositeRefParent.Container");
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT014AutoCreateValueDbEntity> UpdateDbEntity(EntityMapperOperationContext ctx, tstT014AutoCreateValue dto, tstIT014AutoCreateValueDbEntity existing)
	{
		if (dto == null) return null;
		if (Context.T014AutoCreateValuesInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T014AutoCreateValuesInMemory.Add(copy);
			UpdateDbEntity(updatedEntity);
			return updatedEntity;
		}
		tstT014AutoCreateValueDbEntity entity = (existing ?? await GetAsync(dto.Id, _mapper.T014AutoCreateValues.LocalView, Context.T014AutoCreateValuesWithComposites)) as tstT014AutoCreateValueDbEntity;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT014AutoCreateValueDbEntity>(entity.Id, dto.Id);
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated;
		entity.DateUpdated = dto.DateUpdated;
		entity.ReferenceId = IdResolvers.RequiredReferenceId(dto.ReferenceId, "tstT014AutoCreateValue.ReferenceId");
		entity.BooleanValue1 = dto.BooleanValue1;
		entity.BooleanValue2 = dto.BooleanValue2;
		entity.IntValue = dto.IntValue;
		entity.DecimalValue = dto.DecimalValue;
		entity.EnumValue = dto.EnumValue;
		UpdateDbEntity(entity);
		return entity;
	}
	public async Task<tstIT015ParentRecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT015ParentRecord dto, tstIT015ParentRecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T015ParentRecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T015ParentRecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT015ParentRecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T015ParentRecordsLocal, Context.T015ParentRecordsWithComposites)) as tstT015ParentRecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT015ParentRecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.OptionalChildId = IdResolvers.OptionalRecordReferenceId(dto.OptionalChildId);
		entity.RequiredChildId = IdResolvers.RequiredRecordReferenceId(dto.RequiredChildId, "tstT015ParentRecord.RequiredChildId");
		await Assorted.ReconstructSharedRecordRelationship(entity, 0, entity.Children, dto.ChildrenIds);
		entity.OptionalCompositeChild = await UpdateCompositeDbRecord(ctx, dto.OptionalCompositeChild, entity.OptionalCompositeChild);
		entity.OptionalCompositeChildId = IdResolvers.OptionalDbRecordId(entity.OptionalCompositeChild);
		entity.RequiredCompositeChild = await UpdateCompositeDbRecord(ctx, dto.RequiredCompositeChild, entity.RequiredCompositeChild);
		entity.RequiredCompositeChildId = IdResolvers.RequiredDbRecordId(entity.RequiredCompositeChild, "tstT015ParentRecord.RequiredCompositeChildId");
		entity.CompositeChildren = await Assorted
			.ReconstructCompositeRecordRelationship(
				ctx,
				entity.CompositeChildren,
				dto.CompositeChildren,
				CreateFromDTO,
				UpdateCompositeDbRecord,
				DeleteCompositeDbRecord,
				(e) => { if (e.T015ParentRecordId != entity.Id) { e.T015ParentRecordId = entity.Id; return true; } return false; });
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIT015ChildL1RecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT015ChildL1Record dto, tstIT015ChildL1RecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T015ChildL1RecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T015ChildL1RecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT015ChildL1RecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T015ChildL1RecordsLocal, Context.T015ChildL1RecordsWithComposites)) as tstT015ChildL1RecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT015ChildL1RecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ChildL1Value = dto.ChildL1Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.OptionalChildId = IdResolvers.OptionalRecordReferenceId(dto.OptionalChildId);
		entity.RequiredChildId = IdResolvers.RequiredRecordReferenceId(dto.RequiredChildId, "tstT015ChildL1Record.RequiredChildId");
		await Assorted.ReconstructSharedRecordRelationship(entity, 0, entity.Children, dto.ChildrenIds);
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIT015ChildL2RecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT015ChildL2Record dto, tstIT015ChildL2RecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T015ChildL2RecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T015ChildL2RecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT015ChildL2RecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T015ChildL2RecordsLocal, Context.T015ChildL2RecordsWithComposites)) as tstT015ChildL2RecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT015ChildL2RecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ChildL2Value = dto.ChildL2Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIT015ChildOwnedRecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT015ChildOwnedRecord dto, tstIT015ChildOwnedRecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T015ChildOwnedRecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T015ChildOwnedRecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT015ChildOwnedRecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T015ChildOwnedRecordsLocal, Context.T015ChildOwnedRecordsWithComposites)) as tstT015ChildOwnedRecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT015ChildOwnedRecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ChildL2Value = dto.ChildL2Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIT015ParentOrderedRecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT015ParentOrderedRecord dto, tstIT015ParentOrderedRecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T015ParentOrderedRecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T015ParentOrderedRecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT015ParentOrderedRecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T015ParentOrderedRecordsLocal, Context.T015ParentOrderedRecordsWithComposites)) as tstT015ParentOrderedRecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT015ParentOrderedRecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		await Ordered.ReconstructSharedRecordRelationship(entity, 0, entity.OrderedOwnedChildren, dto.OrderedOwnedChildrenIds);
		await Ordered.ReconstructSharedRecordRelationship(entity, 0, entity.OrderedChildren, dto.OrderedChildrenIds);
		entity.CompositeOderedChildren = await Ordered
			.ReconstructCompositeRecordRelationship(
				ctx,
				entity.CompositeOderedChildren,
				dto.CompositeOderedChildren,
				CreateFromDTO,
				UpdateCompositeDbRecord,
				DeleteCompositeDbRecord,
				(e) => e.IndexInT015ParentOrderedRecord,
				(e, idx) => { if (e.IndexInT015ParentOrderedRecord != idx || e.T015ParentOrderedRecordId != entity.Id) { e.IndexInT015ParentOrderedRecord = idx; e.T015ParentOrderedRecordId = entity.Id; return true; } return false; });
		UpdateDbRecord(entity);
		return entity;
	}
	public async Task<tstIT016CompositeParentRecordDbRecord> UpdateDbRecord(EntityMapperOperationContext ctx, tstT016CompositeParentRecord dto, tstIT016CompositeParentRecordDbRecord existing)
	{
		if (dto == null) return null;
		if (Context.T016CompositeParentRecordsInMemory != null)
		{
			var copy = JsonConvertTyped.Copy(dto);
			var updatedEntity = Context.T016CompositeParentRecordsInMemory.Add(copy);
			UpdateDbRecord(updatedEntity);
			return updatedEntity;
		}
		tstT016CompositeParentRecordDbRecord entity = (existing ?? await GetAsync(dto.Id, Context.T016CompositeParentRecordsLocal, Context.T016CompositeParentRecordsWithComposites)) as tstT016CompositeParentRecordDbRecord;
		var context = Context as tstTestDBContext;
		Validation.EnsureSameObject<tstT016CompositeParentRecordDbRecord>(entity.Id, dto.Id);
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.Children = await Assorted
			.ReconstructCompositeRecordRelationship(
				ctx,
				entity.Children,
				dto.Children,
				CreateFromDTO,
				UpdateCompositeDbRecord,
				DeleteCompositeDbRecord,
				(e) => { if (e.T016CompositeParentRecordId != entity.Id) { e.T016CompositeParentRecordId = entity.Id; return true; } return false; });
		UpdateDbRecord(entity);
		return entity;
	}
}
#pragma warning restore CS0612 // Type or member is obsolete
#pragma warning restore CS0105 // Using directive appeared previously in this namespace
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning restore IDE0028 // Collection Initialization
#pragma warning restore IDE0017 // Object Initialization
#pragma warning restore IDE1006 // Naming Styles
}
