namespace test.mapper
{
// autogenerated by ServerMapperGenerator
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable IDE0017 // Object Initialization
#pragma warning disable IDE0028 // Collection Initialization
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning disable CS0105 // Using directive appeared previously in this namespace
#pragma warning disable CS0612 // Type or member is obsolete
using crosscutting;
using crosscutting.sql;
using crosscutting.cqrs;
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Linq;
using shared.sql;
	using test.model;
	using test.sql;
	using test.model;
// generated class, do not modify, source here: file:///placeholder
public partial class tstTestDBContextCRUD : tstITestDBContextCRUDInterface
{
	private readonly tstTestDBContextMapper _mapper;
	protected Validation Validation => _mapper.Validation;
	protected IdResolvers IdResolvers => _mapper.IdResolvers;
	protected tstITestDBContext Context => _mapper.Context;
	protected Task AddDbEntityAsync(IDbEntity entity) => _mapper.AddDbEntityAsync(entity);
	protected Task AddDbRecordAsync(IDbRecord record) => _mapper.AddDbRecordAsync(record);
	protected void UpdateDbEntity(IDbEntity entity) => _mapper.UpdateDbEntity(entity);
	protected void UpdateDbRecord(IDbRecord record) => _mapper.UpdateDbRecord(record);
	protected void RemoveDbEntity(IDbEntity entity) => _mapper.RemoveDbEntity(entity);
	protected void RemoveDbRecord(IDbRecord record) => _mapper.RemoveDbRecord(record);
	protected void RemoveLinks<TLink>(IEnumerable<TLink> links) where TLink : ILinkTable => _mapper.RemoveLinks(links);
	protected OrderedContextTools<tstITestDBContext, IDbEntityMap> Ordered => _mapper.Ordered;
	protected AssortedContextTools<tstITestDBContext, IDbEntityMap> Assorted => _mapper.Assorted;
	protected Task<TDbRecord> GetAsync<TDbRecord>(long id, IEnumerable<TDbRecord> local, IQueryable<TDbRecord> remote) where TDbRecord : class, IDbRecord
		=> _mapper.GetAsync(id, local, remote);
	protected Task<TDbEntity> GetAsync<TDbEntity>(Guid id, IEnumerable<TDbEntity> local, IQueryable<TDbEntity> remote) where TDbEntity : class, IDbEntity
		=> _mapper.GetAsync(id, local, remote);
	protected Task DeleteCompositeRelationship<TDbEntity>(IEnumerable<TDbEntity> list, Func<TDbEntity, Task> deleteEntity) where TDbEntity : IDbEntity
		=> _mapper.DeleteCompositeRelationship<TDbEntity>(list, deleteEntity);
	protected Task DeleteCompositeRecordRelationship<TDbRecord>(IEnumerable<TDbRecord> list, Func<TDbRecord, Task> deleteRecord) where TDbRecord : IDbRecord
		=> _mapper.DeleteCompositeRecordRelationship<TDbRecord>(list, deleteRecord);
	public tstTestDBContextCRUD(tstTestDBContextMapper mapper)
	{
		_mapper = mapper;
	}
}
public partial class tstTestDBContextCRUD
{
	public async Task<tstCompositeChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstCompositeChild dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstCompositeChildDbEntity();
		entity.Id = dto.Id;
		entity.Value = Validation.ToValidString(dto.Value);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstNestedCompositesDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstNestedComposites dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstNestedCompositesDbEntity();
		entity.Id = dto.Id;
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.RequiredEntityId(dto.Composite, "tstNestedComposites.Composite");
		entity.Children = await Ordered
			.CreateCompositeRelationship(
				ctx,
				dto.Children,
				CreateFromDTO,
				(e) => e.IndexInNestedComposites,
				(e, idx) => { if (e.IndexInNestedComposites != idx || e.NestedCompositesId != dto.Id) { e.IndexInNestedComposites = idx; e.NestedCompositesId = dto.Id; return true; } return false; });
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT009CompositeDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT009Composite dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT009CompositeDbEntity();
		entity.Id = dto.Id;
		entity.Value = dto.Value;
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT010CompositeRefChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT010CompositeRefChild dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT010CompositeRefChildDbEntity();
		entity.Id = dto.Id;
		entity.Value = Validation.ToValidString(dto.Value);
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstT010CompositeRefChild.RawId");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT011CompositeRefParentContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT011CompositeRefParentContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT011CompositeRefParentContainerDbEntity();
		entity.Id = dto.Id;
		entity.CompositeChildren = await Ordered
			.CreateCompositeRelationship(
				ctx,
				dto.CompositeChildren,
				CreateFromDTO,
				(e) => e.IndexInT011CompositeRefParentContainer,
				(e, idx) => { if (e.IndexInT011CompositeRefParentContainer != idx || e.T011CompositeRefParentContainerId != dto.Id) { e.IndexInT011CompositeRefParentContainer = idx; e.T011CompositeRefParentContainerId = dto.Id; return true; } return false; });
		entity.CompositeChild = await CreateFromDTO(ctx, dto.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredEntityId(dto.CompositeChild, "tstT011CompositeRefParentContainer.CompositeChild");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT012CompositeRefParentContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT012CompositeRefParentContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT012CompositeRefParentContainerDbEntity();
		entity.Id = dto.Id;
		entity.CompositeChild = await CreateFromDTO(ctx, dto.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredEntityId(dto.CompositeChild, "tstT012CompositeRefParentContainer.CompositeChild");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT013CompositeRefParentContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT013CompositeRefParentContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT013CompositeRefParentContainerDbEntity();
		entity.Id = dto.Id;
		entity.CompositeChildren = await Ordered
			.CreateCompositeRelationship(
				ctx,
				dto.CompositeChildren,
				CreateFromDTO,
				(e) => e.IndexInT013CompositeRefParentContainer,
				(e, idx) => { if (e.IndexInT013CompositeRefParentContainer != idx || e.T013CompositeRefParentContainerId != dto.Id) { e.IndexInT013CompositeRefParentContainer = idx; e.T013CompositeRefParentContainerId = dto.Id; return true; } return false; });
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstT015CompositeChildDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015CompositeChild dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT015CompositeChildDbRecord();
		entity.Id = dto.Id;
		entity.ChildL1Value = dto.ChildL1Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		await AddDbRecordAsync(entity);
		return entity;
	}
	public async Task<tstT016CompositeChildRecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT016CompositeChildRecord dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		var entity = new tstT016CompositeChildRecordDbRecord();
		entity.Id = dto.Id;
		entity.ChildValue = dto.ChildValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		await AddDbRecordAsync(entity);
		return entity;
	}
	public async Task<tstIRawDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstRaw dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.RawsInMemory != null) { return Context.RawsInMemory.Add(dto); }
		var entity = new tstRawDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Index = dto.Index;
		entity.DateTime = dto.DateTime.EnsureUTC();
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIRequiredSharedRefDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstRequiredSharedRef dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.RequiredSharedRefsInMemory != null) { return Context.RequiredSharedRefsInMemory.Add(dto); }
		var entity = new tstRequiredSharedRefDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = dto.Value;
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstRequiredSharedRef.RawId");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIOptionalSharedRefDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstOptionalSharedRef dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.OptionalSharedRefsInMemory != null) { return Context.OptionalSharedRefsInMemory.Add(dto); }
		var entity = new tstOptionalSharedRefDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = dto.Value;
		entity.RawId = IdResolvers.OptionalReferenceId(dto.RawId);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstICompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstCompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.CompositeRefParentsInMemory != null) { return Context.CompositeRefParentsInMemory.Add(dto); }
		var entity = new tstCompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = Validation.ToValidString(dto.Value);
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.RequiredEntityId(dto.Composite, "tstCompositeRefParent.Composite");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIOptionalCompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstOptionalCompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.OptionalCompositeRefParentsInMemory != null) { return Context.OptionalCompositeRefParentsInMemory.Add(dto); }
		var entity = new tstOptionalCompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.OptionalEntityId(dto.Composite);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIOwnerContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstOwnerContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.OwnerContainersInMemory != null) { return Context.OwnerContainersInMemory.Add(dto); }
		var entity = new tstOwnerContainerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Index = dto.Index;
		await Assorted.ReconstructOwnedRelationsip(context.tstOwnerContainer_tstRaw_Raws, entity, 0, entity.Raws, dto.RawIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstICompositesContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstCompositesContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.CompositesContainersInMemory != null) { return Context.CompositesContainersInMemory.Add(dto); }
		var entity = new tstCompositesContainerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Index = dto.Index;
		entity.Composites = await Assorted
			.CreateCompositeRelationship(
				ctx,
				dto.Composites,
				CreateFromDTO);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstISharedContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstSharedContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.SharedContainersInMemory != null) { return Context.SharedContainersInMemory.Add(dto); }
		var entity = new tstSharedContainerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await AddDbEntityAsync(entity);
		await Assorted.CreateManyToMany<tstSharedContainer_tstRaw_Shareds>(entity, 0, dto.SharedIds);
		return entity;
	}
	public async Task<tstIMultipleSharedContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstMultipleSharedContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.MultipleSharedContainersInMemory != null) { return Context.MultipleSharedContainersInMemory.Add(dto); }
		var entity = new tstMultipleSharedContainerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await AddDbEntityAsync(entity);
		await Assorted.CreateManyToMany<tstMultipleSharedContainer_tstRaw_FirstShareds>(entity, 0, dto.FirstSharedIds);
		await Assorted.CreateManyToMany<tstMultipleSharedContainer_tstRaw_SecondShareds>(entity, 0, dto.SecondSharedIds);
		return entity;
	}
	public async Task<tstIMixedContainerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstMixedContainer dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.MixedContainersInMemory != null) { return Context.MixedContainersInMemory.Add(dto); }
		var entity = new tstMixedContainerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await Assorted.ReconstructOwnedRelationsip(context.tstMixedContainer_tstRaw_Owneds, entity, 0, entity.Owneds, dto.OwnedIds);
		await AddDbEntityAsync(entity);
		await Assorted.CreateManyToMany<tstMixedContainer_tstRaw_Shareds>(entity, 0, dto.SharedIds);
		return entity;
	}
	public async Task<tstIMultipleCompositeRefDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstMultipleCompositeRef dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.MultipleCompositeRefsInMemory != null) { return Context.MultipleCompositeRefsInMemory.Add(dto); }
		var entity = new tstMultipleCompositeRefDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.RequiredEntityId(dto.Composite, "tstMultipleCompositeRef.Composite");
		entity.OptionalComposite = await CreateFromDTO(ctx, dto.OptionalComposite);
		entity.OptionalCompositeId = IdResolvers.OptionalEntityId(dto.OptionalComposite);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIMultipleSharedRefDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstMultipleSharedRef dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.MultipleSharedRefsInMemory != null) { return Context.MultipleSharedRefsInMemory.Add(dto); }
		var entity = new tstMultipleSharedRefDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstMultipleSharedRef.RawId");
		entity.OptionalRawId = IdResolvers.OptionalReferenceId(dto.OptionalRawId);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstINestedCompositeRootDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstNestedCompositeRoot dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.NestedCompositeRootsInMemory != null) { return Context.NestedCompositeRootsInMemory.Add(dto); }
		var entity = new tstNestedCompositeRootDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.RequiredEntityId(dto.Composite, "tstNestedCompositeRoot.Composite");
		entity.OptionalComposite = await CreateFromDTO(ctx, dto.OptionalComposite);
		entity.OptionalCompositeId = IdResolvers.OptionalEntityId(dto.OptionalComposite);
		entity.Nested = await CreateFromDTO(ctx, dto.Nested);
		entity.NestedId = IdResolvers.RequiredEntityId(dto.Nested, "tstNestedCompositeRoot.Nested");
		entity.OptionalRawId = IdResolvers.OptionalReferenceId(dto.OptionalRawId);
		await AddDbEntityAsync(entity);
		await Ordered.CreateManyToMany<tstNestedCompositeRoot_tstRaw_RawLists>(entity, 0, dto.RawListIds);
		return entity;
	}
	public async Task<tstIChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstChild dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.ChildrenInMemory != null) { return Context.ChildrenInMemory.Add(dto); }
		var entity = new tstChildDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.SecondParentId = IdResolvers.RequiredReferenceId(dto.SecondParentId, "tstChild.SecondParentId");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.ParentsInMemory != null) { return Context.ParentsInMemory.Add(dto); }
		var entity = new tstParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await Ordered.ReconstructOwnedRelationsip(context.tstParent_tstChild_Children, entity, 0, entity.Children, dto.ChildrenIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT001ChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT001Child dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T001ChildrenInMemory != null) { return Context.T001ChildrenInMemory.Add(dto); }
		var entity = new tstT001ChildDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.CompositeChild = await CreateFromDTO(ctx, dto.CompositeChild);
		entity.CompositeChildId = IdResolvers.RequiredEntityId(dto.CompositeChild, "tstT001Child.CompositeChild");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT001ParentOwnerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT001ParentOwner dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T001ParentOwnersInMemory != null) { return Context.T001ParentOwnersInMemory.Add(dto); }
		var entity = new tstT001ParentOwnerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await Assorted.ReconstructOwnedRelationsip(context.tstT001ParentOwner_tstT001Child_T001Children, entity, 0, entity.T001Children, dto.T001ChildrenIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIParentWithSharedListDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstParentWithSharedList dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.ParentWithSharedListsInMemory != null) { return Context.ParentWithSharedListsInMemory.Add(dto); }
		var entity = new tstParentWithSharedListDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await AddDbEntityAsync(entity);
		await Ordered.CreateManyToMany<tstParentWithSharedList_tstRaw_RawLists>(entity, 0, dto.RawListIds);
		return entity;
	}
	public async Task<tstIT002ChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT002Child dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T002ChildrenInMemory != null) { return Context.T002ChildrenInMemory.Add(dto); }
		var entity = new tstT002ChildDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Name = Validation.ToValidString(dto.Name);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT002ParentOwnerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT002ParentOwner dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T002ParentOwnersInMemory != null) { return Context.T002ParentOwnersInMemory.Add(dto); }
		var entity = new tstT002ParentOwnerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Iteration = dto.Iteration;
		await Ordered.ReconstructOwnedRelationsip(context.tstT002ParentOwner_tstT002Child_T002Children, entity, 0, entity.T002Children, dto.T002ChildrenIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT002ChildHolderDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT002ChildHolder dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T002ChildHoldersInMemory != null) { return Context.T002ChildHoldersInMemory.Add(dto); }
		var entity = new tstT002ChildHolderDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Iteration = dto.Iteration;
		entity.T002ChildId = IdResolvers.OptionalReferenceId(dto.T002ChildId);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT003ChildDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT003Child dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T003ChildrenInMemory != null) { return Context.T003ChildrenInMemory.Add(dto); }
		var entity = new tstT003ChildDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Name = Validation.ToValidString(dto.Name);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT003ParentOwnerDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT003ParentOwner dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T003ParentOwnersInMemory != null) { return Context.T003ParentOwnersInMemory.Add(dto); }
		var entity = new tstT003ParentOwnerDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Iteration = dto.Iteration;
		await Ordered.ReconstructOwnedRelationsip(context.tstT003ParentOwner_tstT003Child_T003Children, entity, 0, entity.T003Children, dto.T003ChildrenIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT003ChildHolderDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT003ChildHolder dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T003ChildHoldersInMemory != null) { return Context.T003ChildHoldersInMemory.Add(dto); }
		var entity = new tstT003ChildHolderDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Iteration = dto.Iteration;
		entity.T003ChildId = IdResolvers.OptionalReferenceId(dto.T003ChildId);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT004RecursiveLinkSetDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT004RecursiveLinkSet dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T004RecursiveLinkSetsInMemory != null) { return Context.T004RecursiveLinkSetsInMemory.Add(dto); }
		var entity = new tstT004RecursiveLinkSetDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await AddDbEntityAsync(entity);
		await Assorted.CreateManyToMany<tstT004RecursiveLinkSet_tstT004RecursiveLinkSet_RecursiveLinks>(entity, 0, dto.RecursiveLinkIds);
		return entity;
	}
	public async Task<tstIT005RecursiveLinkListDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT005RecursiveLinkList dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T005RecursiveLinkListsInMemory != null) { return Context.T005RecursiveLinkListsInMemory.Add(dto); }
		var entity = new tstT005RecursiveLinkListDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await AddDbEntityAsync(entity);
		await Ordered.CreateManyToMany<tstT005RecursiveLinkList_tstT005RecursiveLinkList_RecursiveLinks>(entity, 0, dto.RecursiveLinkIds);
		return entity;
	}
	public async Task<tstIT006PerfMaxQueryItemDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT006PerfMaxQueryItem dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T006PerfMaxQueryItemsInMemory != null) { return Context.T006PerfMaxQueryItemsInMemory.Add(dto); }
		var entity = new tstT006PerfMaxQueryItemDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = dto.Value;
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT006PerfMaxQueryValueDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT006PerfMaxQueryValue dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T006PerfMaxQueryValuesInMemory != null) { return Context.T006PerfMaxQueryValuesInMemory.Add(dto); }
		var entity = new tstT006PerfMaxQueryValueDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = dto.Value;
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT007LeafDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT007Leaf dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T007LeavesInMemory != null) { return Context.T007LeavesInMemory.Add(dto); }
		var entity = new tstT007LeafDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await Ordered.ReconstructOwnedRelationsip(context.tstT007Leaf_tstT007Leaf_T007Leaves, entity, 0, entity.T007Leaves, dto.T007LeafIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT007RootDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT007Root dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T007RootsInMemory != null) { return Context.T007RootsInMemory.Add(dto); }
		var entity = new tstT007RootDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		await Ordered.ReconstructOwnedRelationsip(context.tstT007Root_tstT007Leaf_T007Leaves, entity, 0, entity.T007Leaves, dto.T007LeafIds);
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT008ParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT008Parent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T008ParentsInMemory != null) { return Context.T008ParentsInMemory.Add(dto); }
		var entity = new tstT008ParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Child = await CreateFromDTO(ctx, dto.Child);
		entity.ChildId = IdResolvers.RequiredEntityId(dto.Child, "tstT008Parent.Child");
		entity.RawId = IdResolvers.RequiredReferenceId(dto.RawId, "tstT008Parent.RawId");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT009PrincipalDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT009Principal dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T009PrincipalsInMemory != null) { return Context.T009PrincipalsInMemory.Add(dto); }
		var entity = new tstT009PrincipalDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Value = dto.Value;
		entity.Composite = await CreateFromDTO(ctx, dto.Composite);
		entity.CompositeId = IdResolvers.RequiredEntityId(dto.Composite, "tstT009Principal.Composite");
		entity.T009Composites = await Ordered
			.CreateCompositeRelationship(
				ctx,
				dto.T009Composites,
				CreateFromDTO,
				(e) => e.IndexInT009Principal,
				(e, idx) => { if (e.IndexInT009Principal != idx || e.T009PrincipalId != dto.Id) { e.IndexInT009Principal = idx; e.T009PrincipalId = dto.Id; return true; } return false; });
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT009UserDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT009User dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T009UsersInMemory != null) { return Context.T009UsersInMemory.Add(dto); }
		var entity = new tstT009UserDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.PrincipalId = IdResolvers.RequiredReferenceId(dto.PrincipalId, "tstT009User.PrincipalId");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT010CompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT010CompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T010CompositeRefParentsInMemory != null) { return Context.T010CompositeRefParentsInMemory.Add(dto); }
		var entity = new tstT010CompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.T010CompositeRefChildren = await Ordered
			.CreateCompositeRelationship(
				ctx,
				dto.T010CompositeRefChildren,
				CreateFromDTO,
				(e) => e.IndexInT010CompositeRefParent,
				(e, idx) => { if (e.IndexInT010CompositeRefParent != idx || e.T010CompositeRefParentId != dto.Id) { e.IndexInT010CompositeRefParent = idx; e.T010CompositeRefParentId = dto.Id; return true; } return false; });
		entity.T010CompositeRefChild = await CreateFromDTO(ctx, dto.T010CompositeRefChild);
		entity.T010CompositeRefChildId = IdResolvers.RequiredEntityId(dto.T010CompositeRefChild, "tstT010CompositeRefParent.T010CompositeRefChild");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT011CompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT011CompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T011CompositeRefParentsInMemory != null) { return Context.T011CompositeRefParentsInMemory.Add(dto); }
		var entity = new tstT011CompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Container = await CreateFromDTO(ctx, dto.Container);
		entity.ContainerId = IdResolvers.RequiredEntityId(dto.Container, "tstT011CompositeRefParent.Container");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT012CompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT012CompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T012CompositeRefParentsInMemory != null) { return Context.T012CompositeRefParentsInMemory.Add(dto); }
		var entity = new tstT012CompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Container = await CreateFromDTO(ctx, dto.Container);
		entity.ContainerId = IdResolvers.RequiredEntityId(dto.Container, "tstT012CompositeRefParent.Container");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT013CompositeRefParentDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT013CompositeRefParent dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T013CompositeRefParentsInMemory != null) { return Context.T013CompositeRefParentsInMemory.Add(dto); }
		var entity = new tstT013CompositeRefParentDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.Container = await CreateFromDTO(ctx, dto.Container);
		entity.ContainerId = IdResolvers.RequiredEntityId(dto.Container, "tstT013CompositeRefParent.Container");
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT014AutoCreateValueDbEntity> CreateFromDTO(EntityMapperOperationContext ctx, tstT014AutoCreateValue dto)
	{
		if (dto == null) return null;
		Validation.EnsureEntityHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T014AutoCreateValuesInMemory != null) { return Context.T014AutoCreateValuesInMemory.Add(dto); }
		var entity = new tstT014AutoCreateValueDbEntity();
		entity.Id = dto.Id;
		entity.IsSystem = dto.IsSystem;
		entity.Revision = dto.Revision;
		entity.DateCreated = dto.DateCreated.EnsureUTC();
		entity.DateUpdated = dto.DateUpdated.EnsureUTC();
		entity.ReferenceId = IdResolvers.RequiredReferenceId(dto.ReferenceId, "tstT014AutoCreateValue.ReferenceId");
		entity.BooleanValue1 = dto.BooleanValue1;
		entity.BooleanValue2 = dto.BooleanValue2;
		entity.IntValue = dto.IntValue;
		entity.DecimalValue = dto.DecimalValue;
		entity.EnumValue = dto.EnumValue;
		await AddDbEntityAsync(entity);
		return entity;
	}
	public async Task<tstIT015ParentRecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015ParentRecord dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T015ParentRecordsInMemory != null) { return Context.T015ParentRecordsInMemory.Add(dto); }
		var entity = new tstT015ParentRecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.OptionalChildId = IdResolvers.OptionalRecordReferenceId(dto.OptionalChildId);
		entity.RequiredChildId = IdResolvers.RequiredRecordReferenceId(dto.RequiredChildId, "tstT015ParentRecord.RequiredChildId");
		entity.OptionalCompositeChild = await CreateFromDTO(ctx, dto.OptionalCompositeChild);
		entity.OptionalCompositeChildId = IdResolvers.OptionalRecordId(dto.OptionalCompositeChild);
		entity.RequiredCompositeChild = await CreateFromDTO(ctx, dto.RequiredCompositeChild);
		entity.RequiredCompositeChildId = IdResolvers.RequiredRecordId(dto.RequiredCompositeChild, "tstT015ParentRecord.RequiredCompositeChildId");
		entity.CompositeChildren = await Assorted
			.CreateCompositeRecordRelationship(
				ctx,
				dto.CompositeChildren,
				CreateFromDTO);
		await AddDbRecordAsync(entity);
		await Assorted.CreateManyToMany<tstT015ParentRecord_tstT015ChildL1Record_Children>(entity, 0, dto.ChildrenIds);
		return entity;
	}
	public async Task<tstIT015ChildL1RecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015ChildL1Record dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T015ChildL1RecordsInMemory != null) { return Context.T015ChildL1RecordsInMemory.Add(dto); }
		var entity = new tstT015ChildL1RecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ChildL1Value = dto.ChildL1Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.OptionalChildId = IdResolvers.OptionalRecordReferenceId(dto.OptionalChildId);
		entity.RequiredChildId = IdResolvers.RequiredRecordReferenceId(dto.RequiredChildId, "tstT015ChildL1Record.RequiredChildId");
		await AddDbRecordAsync(entity);
		await Assorted.CreateManyToMany<tstT015ChildL1Record_tstT015ChildL2Record_Children>(entity, 0, dto.ChildrenIds);
		return entity;
	}
	public async Task<tstIT015ChildL2RecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015ChildL2Record dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T015ChildL2RecordsInMemory != null) { return Context.T015ChildL2RecordsInMemory.Add(dto); }
		var entity = new tstT015ChildL2RecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ChildL2Value = dto.ChildL2Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		await AddDbRecordAsync(entity);
		return entity;
	}
	public async Task<tstIT015ChildOwnedRecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015ChildOwnedRecord dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T015ChildOwnedRecordsInMemory != null) { return Context.T015ChildOwnedRecordsInMemory.Add(dto); }
		var entity = new tstT015ChildOwnedRecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ChildL2Value = dto.ChildL2Value;
		entity.Comments = Validation.ToValidString(dto.Comments);
		await AddDbRecordAsync(entity);
		return entity;
	}
	public async Task<tstIT015ParentOrderedRecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT015ParentOrderedRecord dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T015ParentOrderedRecordsInMemory != null) { return Context.T015ParentOrderedRecordsInMemory.Add(dto); }
		var entity = new tstT015ParentOrderedRecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.CompositeOderedChildren = await Ordered
			.CreateCompositeRecordRelationship(
				ctx,
				dto.CompositeOderedChildren,
				CreateFromDTO,
				(e) => e.IndexInT015ParentOrderedRecord,
				(e, idx) => { if (e.IndexInT015ParentOrderedRecord != idx || e.T015ParentOrderedRecordId != dto.Id) { e.IndexInT015ParentOrderedRecord = idx; e.T015ParentOrderedRecordId = dto.Id; return true; } return false; });
		await AddDbRecordAsync(entity);
		await Ordered.CreateManyToMany<tstT015ParentOrderedRecord_tstT015ChildOwnedRecord_OrderedOwnedChildren>(entity, 0, dto.OrderedOwnedChildrenIds);
		await Ordered.CreateManyToMany<tstT015ParentOrderedRecord_tstT015ChildL1Record_OrderedChildren>(entity, 0, dto.OrderedChildrenIds);
		return entity;
	}
	public async Task<tstIT016CompositeParentRecordDbRecord> CreateFromDTO(EntityMapperOperationContext ctx, tstT016CompositeParentRecord dto)
	{
		if (dto == null) return null;
		Validation.EnsureRecordHasId(dto);
		var context = Context as tstTestDBContext;
		if (Context.T016CompositeParentRecordsInMemory != null) { return Context.T016CompositeParentRecordsInMemory.Add(dto); }
		var entity = new tstT016CompositeParentRecordDbRecord();
		entity.Id = dto.Id;
		entity.Revision = dto.Revision;
		entity.ParentValue = dto.ParentValue;
		entity.Comments = Validation.ToValidString(dto.Comments);
		entity.Children = await Assorted
			.CreateCompositeRecordRelationship(
				ctx,
				dto.Children,
				CreateFromDTO);
		await AddDbRecordAsync(entity);
		return entity;
	}
}
#pragma warning restore CS0612 // Type or member is obsolete
#pragma warning restore CS0105 // Using directive appeared previously in this namespace
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
#pragma warning restore IDE0028 // Collection Initialization
#pragma warning restore IDE0017 // Object Initialization
#pragma warning restore IDE1006 // Naming Styles
}
