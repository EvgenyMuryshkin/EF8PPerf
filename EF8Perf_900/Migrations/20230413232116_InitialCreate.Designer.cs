// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test.sql;

#nullable disable

namespace test.sql.Migrations
{
    [DbContext(typeof(tstTestDBContext))]
    [Migration("20230413232116_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tst")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("test.sql.tstChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid>("SecondParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("second_parent_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SecondParentId");

                    b.ToTable("children", "tst");
                });

            modelBuilder.Entity("test.sql.tstCompositeChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompositesContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composites_container_id");

                    b.Property<int>("IndexInNestedComposites")
                        .HasColumnType("int")
                        .HasColumnName("index_in_nested_composites");

                    b.Property<int>("IndexInT011CompositeRefParentContainer")
                        .HasColumnType("int")
                        .HasColumnName("index_in_t011_composite_ref_parent_container");

                    b.Property<int>("IndexInT013CompositeRefParentContainer")
                        .HasColumnType("int")
                        .HasColumnName("index_in_t013_composite_ref_parent_container");

                    b.Property<Guid?>("NestedCompositesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nested_composites_id");

                    b.Property<Guid?>("T011CompositeRefParentContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t011_composite_ref_parent_container_id");

                    b.Property<Guid?>("T013CompositeRefParentContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t013_composite_ref_parent_container_id");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CompositesContainerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NestedCompositesId");

                    b.HasIndex("T011CompositeRefParentContainerId");

                    b.HasIndex("T013CompositeRefParentContainerId");

                    b.ToTable("composite_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstCompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstCompositesContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("composites_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstMixedContainer_tstRaw_Owneds", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("mixed_container_raw_owneds", "tst");
                });

            modelBuilder.Entity("test.sql.tstMixedContainer_tstRaw_Shareds", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("mixed_container_raw_shareds", "tst");
                });

            modelBuilder.Entity("test.sql.tstMixedContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("mixed_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstMultipleCompositeRefDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid?>("OptionalCompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optional_composite_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OptionalCompositeId");

                    b.ToTable("multiple_composite_refs", "tst");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainer_tstRaw_FirstShareds", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("multiple_shared_container_raw_first_shareds", "tst");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainer_tstRaw_SecondShareds", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("multiple_shared_container_raw_second_shareds", "tst");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("multiple_shared_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedRefDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid?>("OptionalRawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optional_raw_id");

                    b.Property<Guid>("RawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("raw_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OptionalRawId");

                    b.HasIndex("RawId");

                    b.ToTable("multiple_shared_refs", "tst");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositeRoot_tstRaw_RawLists", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("nested_composite_root_raw_raw_lists", "tst");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositeRootDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid>("NestedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("nested_id");

                    b.Property<Guid?>("OptionalCompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optional_composite_id");

                    b.Property<Guid?>("OptionalRawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("optional_raw_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NestedId");

                    b.HasIndex("OptionalCompositeId");

                    b.HasIndex("OptionalRawId");

                    b.ToTable("nested_composite_roots", "tst");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositesDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("nested_composites", "tst");
                });

            modelBuilder.Entity("test.sql.tstOptionalCompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("optional_composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstOptionalSharedRefDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid?>("RawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("raw_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RawId");

                    b.ToTable("optional_shared_refs", "tst");
                });

            modelBuilder.Entity("test.sql.tstOwnerContainer_tstRaw_Raws", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("owner_container_raw_raws", "tst");
                });

            modelBuilder.Entity("test.sql.tstOwnerContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("owner_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstParent_tstChild_Children", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("parent_child_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstParentWithSharedList_tstRaw_RawLists", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("parent_with_shared_list_raw_raw_lists", "tst");
                });

            modelBuilder.Entity("test.sql.tstParentWithSharedListDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("parent_with_shared_lists", "tst");
                });

            modelBuilder.Entity("test.sql.tstRawDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_time");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("raws", "tst");
                });

            modelBuilder.Entity("test.sql.tstRequiredSharedRefDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid>("RawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("raw_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RawId");

                    b.ToTable("required_shared_refs", "tst");
                });

            modelBuilder.Entity("test.sql.tstSharedContainer_tstRaw_Shareds", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("shared_container_raw_shareds", "tst");
                });

            modelBuilder.Entity("test.sql.tstSharedContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("shared_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstT001ChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_child_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("CompositeChildId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t001_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT001ParentOwner_tstT001Child_T001Children", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t001_parent_owner_t001_child_t001_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT001ParentOwnerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t001_parent_owners", "tst");
                });

            modelBuilder.Entity("test.sql.tstT002ChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t002_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT002ChildHolderDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<int>("Iteration")
                        .HasColumnType("int")
                        .HasColumnName("iteration");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid?>("T002ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t002_child_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T002ChildId");

                    b.ToTable("t002_child_holders", "tst");
                });

            modelBuilder.Entity("test.sql.tstT002ParentOwner_tstT002Child_T002Children", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t002_parent_owner_t002_child_t002_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT002ParentOwnerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<int>("Iteration")
                        .HasColumnType("int")
                        .HasColumnName("iteration");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t002_parent_owners", "tst");
                });

            modelBuilder.Entity("test.sql.tstT003ChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t003_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT003ChildHolderDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<int>("Iteration")
                        .HasColumnType("int")
                        .HasColumnName("iteration");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid?>("T003ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t003_child_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T003ChildId");

                    b.ToTable("t003_child_holders", "tst");
                });

            modelBuilder.Entity("test.sql.tstT003ParentOwner_tstT003Child_T003Children", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t003_parent_owner_t003_child_t003_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT003ParentOwnerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<int>("Iteration")
                        .HasColumnType("int")
                        .HasColumnName("iteration");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t003_parent_owners", "tst");
                });

            modelBuilder.Entity("test.sql.tstT004RecursiveLinkSet_tstT004RecursiveLinkSet_RecursiveLinks", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t004_recursive_link_set_t004_recursive_link_set_recursive_links", "tst");
                });

            modelBuilder.Entity("test.sql.tstT004RecursiveLinkSetDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t004_recursive_link_sets", "tst");
                });

            modelBuilder.Entity("test.sql.tstT005RecursiveLinkList_tstT005RecursiveLinkList_RecursiveLinks", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t005_recursive_link_list_t005_recursive_link_list_recursive_links", "tst");
                });

            modelBuilder.Entity("test.sql.tstT005RecursiveLinkListDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t005_recursive_link_lists", "tst");
                });

            modelBuilder.Entity("test.sql.tstT006PerfMaxQueryItemDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t006_perf_max_query_items", "tst");
                });

            modelBuilder.Entity("test.sql.tstT006PerfMaxQueryValueDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t006_perf_max_query_values", "tst");
                });

            modelBuilder.Entity("test.sql.tstT007Leaf_tstT007Leaf_T007Leaves", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t007_leaf_t007_leaf_t007_leaves", "tst");
                });

            modelBuilder.Entity("test.sql.tstT007LeafDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t007_leaves", "tst");
                });

            modelBuilder.Entity("test.sql.tstT007Root_tstT007Leaf_T007Leaves", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t007_root_t007_leaf_t007_leaves", "tst");
                });

            modelBuilder.Entity("test.sql.tstT007RootDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t007_roots", "tst");
                });

            modelBuilder.Entity("test.sql.tstT008ParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("child_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid>("RawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("raw_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RawId");

                    b.ToTable("t008_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstT009CompositeDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("IndexInT009Principal")
                        .HasColumnType("int")
                        .HasColumnName("index_in_t009_principal");

                    b.Property<Guid?>("T009PrincipalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t009_principal_id");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T009PrincipalId");

                    b.ToTable("t009_composites", "tst");
                });

            modelBuilder.Entity("test.sql.tstT009PrincipalDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t009_principals", "tst");
                });

            modelBuilder.Entity("test.sql.tstT009UserDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid>("PrincipalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("principal_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PrincipalId");

                    b.ToTable("t009_users", "tst");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefChildDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("IndexInT010CompositeRefParent")
                        .HasColumnType("int")
                        .HasColumnName("index_in_t010_composite_ref_parent");

                    b.Property<Guid>("RawId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("raw_id");

                    b.Property<Guid?>("T010CompositeRefParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t010_composite_ref_parent_id");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RawId");

                    b.HasIndex("T010CompositeRefParentId");

                    b.ToTable("t010_composite_ref_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.Property<Guid>("T010CompositeRefChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("t010_composite_ref_child_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T010CompositeRefChildId");

                    b.ToTable("t010_composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstT011CompositeRefParentContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_child_id");

                    b.HasKey("Id");

                    b.HasIndex("CompositeChildId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t011_composite_ref_parent_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstT011CompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("container_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t011_composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstT012CompositeRefParentContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CompositeChildId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("composite_child_id");

                    b.HasKey("Id");

                    b.HasIndex("CompositeChildId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t012_composite_ref_parent_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstT012CompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("container_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t012_composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstT013CompositeRefParentContainerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t013_composite_ref_parent_containers", "tst");
                });

            modelBuilder.Entity("test.sql.tstT013CompositeRefParentDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("container_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t013_composite_ref_parents", "tst");
                });

            modelBuilder.Entity("test.sql.tstT014AutoCreateValueDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("BooleanValue1")
                        .HasColumnType("bit")
                        .HasColumnName("boolean_value1");

                    b.Property<bool>("BooleanValue2")
                        .HasColumnType("bit")
                        .HasColumnName("boolean_value2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<decimal>("DecimalValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(42m)
                        .HasColumnName("decimal_value");

                    b.Property<int>("EnumValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasColumnName("enum_value");

                    b.Property<int>("IntValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(42)
                        .HasColumnName("int_value");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("f5871072-975e-415b-bf5c-11a81c1964d1"))
                        .HasColumnName("reference_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ReferenceId");

                    b.ToTable("t014_auto_create_values", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL1Record_tstT015ChildL2Record_Children", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t015_child_l1_record_t015_child_l2_record_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL1RecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChildL1Value")
                        .HasColumnType("int")
                        .HasColumnName("child_l1_value");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<long?>("OptionalChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("optional_child_id");

                    b.Property<long>("RequiredChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("required_child_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OptionalChildId");

                    b.HasIndex("RequiredChildId");

                    b.ToTable("t015_child_l1_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL2RecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChildL2Value")
                        .HasColumnType("int")
                        .HasColumnName("child_l2_value");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t015_child_l2_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ChildOwnedRecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChildL2Value")
                        .HasColumnType("int")
                        .HasColumnName("child_l2_value");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t015_child_owned_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015CompositeChildDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChildL1Value")
                        .HasColumnType("int")
                        .HasColumnName("child_l1_value");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<int>("IndexInT015ParentOrderedRecord")
                        .HasColumnType("int")
                        .HasColumnName("index_in_t015_parent_ordered_record");

                    b.Property<long?>("T015ParentOrderedRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("t015_parent_ordered_record_id");

                    b.Property<long?>("T015ParentRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("t015_parent_record_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T015ParentOrderedRecordId");

                    b.HasIndex("T015ParentRecordId");

                    b.ToTable("t015_composite_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecord_tstT015ChildL1Record_OrderedChildren", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t015_parent_ordered_record_t015_child_l1_record_ordered_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecord_tstT015ChildOwnedRecord_OrderedOwnedChildren", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("child_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t015_parent_ordered_record_t015_child_owned_record_ordered_owned_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<int>("ParentValue")
                        .HasColumnType("int")
                        .HasColumnName("parent_value");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t015_parent_ordered_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ParentRecord_tstT015ChildL1Record_Children", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("t015_parent_record_t015_child_l1_record_children", "tst");
                });

            modelBuilder.Entity("test.sql.tstT015ParentRecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<long?>("OptionalChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("optional_child_id");

                    b.Property<long?>("OptionalCompositeChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("optional_composite_child_id");

                    b.Property<int>("ParentValue")
                        .HasColumnType("int")
                        .HasColumnName("parent_value");

                    b.Property<long>("RequiredChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("required_child_id");

                    b.Property<long>("RequiredCompositeChildId")
                        .HasColumnType("bigint")
                        .HasColumnName("required_composite_child_id");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OptionalChildId");

                    b.HasIndex("OptionalCompositeChildId");

                    b.HasIndex("RequiredChildId");

                    b.HasIndex("RequiredCompositeChildId");

                    b.ToTable("t015_parent_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT016CompositeChildRecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChildValue")
                        .HasColumnType("int")
                        .HasColumnName("child_value");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<long?>("T016CompositeParentRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("t016_composite_parent_record_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("T016CompositeParentRecordId");

                    b.ToTable("t016_composite_child_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstT016CompositeParentRecordDbRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<int>("ParentValue")
                        .HasColumnType("int")
                        .HasColumnName("parent_value");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint")
                        .HasColumnName("revision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("t016_composite_parent_records", "tst");
                });

            modelBuilder.Entity("test.sql.tstChildDbEntity", b =>
                {
                    b.HasOne("test.sql.tstParentDbEntity", "SecondParent")
                        .WithMany("Children_SecondParent")
                        .HasForeignKey("SecondParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SecondParent");
                });

            modelBuilder.Entity("test.sql.tstCompositeChildDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositesContainerDbEntity", "CompositesContainer")
                        .WithMany("Composites")
                        .HasForeignKey("CompositesContainerId");

                    b.HasOne("test.sql.tstNestedCompositesDbEntity", "NestedComposites")
                        .WithMany("Children")
                        .HasForeignKey("NestedCompositesId");

                    b.HasOne("test.sql.tstT011CompositeRefParentContainerDbEntity", "T011CompositeRefParentContainer")
                        .WithMany("CompositeChildren")
                        .HasForeignKey("T011CompositeRefParentContainerId");

                    b.HasOne("test.sql.tstT013CompositeRefParentContainerDbEntity", "T013CompositeRefParentContainer")
                        .WithMany("CompositeChildren")
                        .HasForeignKey("T013CompositeRefParentContainerId");

                    b.Navigation("CompositesContainer");

                    b.Navigation("NestedComposites");

                    b.Navigation("T011CompositeRefParentContainer");

                    b.Navigation("T013CompositeRefParentContainer");
                });

            modelBuilder.Entity("test.sql.tstCompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Composite")
                        .WithMany("CompositeRefParents_Composite")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Composite");
                });

            modelBuilder.Entity("test.sql.tstMixedContainer_tstRaw_Owneds", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("MixedContainers_Owneds")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstMixedContainerDbEntity", "Parent")
                        .WithMany("Owneds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstMixedContainer_tstRaw_Shareds", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("MixedContainers_Shareds")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstMixedContainerDbEntity", "Parent")
                        .WithMany("Shareds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstMultipleCompositeRefDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Composite")
                        .WithMany("MultipleCompositeRefs_Composite")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstCompositeChildDbEntity", "OptionalComposite")
                        .WithMany("MultipleCompositeRefs_OptionalComposite")
                        .HasForeignKey("OptionalCompositeId");

                    b.Navigation("Composite");

                    b.Navigation("OptionalComposite");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainer_tstRaw_FirstShareds", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("MultipleSharedContainers_FirstShareds")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstMultipleSharedContainerDbEntity", "Parent")
                        .WithMany("FirstShareds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainer_tstRaw_SecondShareds", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("MultipleSharedContainers_SecondShareds")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstMultipleSharedContainerDbEntity", "Parent")
                        .WithMany("SecondShareds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedRefDbEntity", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "OptionalRaw")
                        .WithMany("MultipleSharedRefs_OptionalRaw")
                        .HasForeignKey("OptionalRawId");

                    b.HasOne("test.sql.tstRawDbEntity", "Raw")
                        .WithMany("MultipleSharedRefs_Raw")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OptionalRaw");

                    b.Navigation("Raw");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositeRoot_tstRaw_RawLists", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("NestedCompositeRoots_RawLists")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstNestedCompositeRootDbEntity", "Parent")
                        .WithMany("RawLists")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositeRootDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Composite")
                        .WithMany("NestedCompositeRoots_Composite")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstNestedCompositesDbEntity", "Nested")
                        .WithMany("NestedCompositeRoots_Nested")
                        .HasForeignKey("NestedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstCompositeChildDbEntity", "OptionalComposite")
                        .WithMany("NestedCompositeRoots_OptionalComposite")
                        .HasForeignKey("OptionalCompositeId");

                    b.HasOne("test.sql.tstRawDbEntity", "OptionalRaw")
                        .WithMany("NestedCompositeRoots_OptionalRaw")
                        .HasForeignKey("OptionalRawId");

                    b.Navigation("Composite");

                    b.Navigation("Nested");

                    b.Navigation("OptionalComposite");

                    b.Navigation("OptionalRaw");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositesDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Composite")
                        .WithMany("NestedComposites_Composite")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Composite");
                });

            modelBuilder.Entity("test.sql.tstOptionalCompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Composite")
                        .WithMany("OptionalCompositeRefParents_Composite")
                        .HasForeignKey("CompositeId");

                    b.Navigation("Composite");
                });

            modelBuilder.Entity("test.sql.tstOptionalSharedRefDbEntity", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Raw")
                        .WithMany("OptionalSharedRefs_Raw")
                        .HasForeignKey("RawId");

                    b.Navigation("Raw");
                });

            modelBuilder.Entity("test.sql.tstOwnerContainer_tstRaw_Raws", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("OwnerContainers_Raws")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstOwnerContainerDbEntity", "Parent")
                        .WithMany("Raws")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstParent_tstChild_Children", b =>
                {
                    b.HasOne("test.sql.tstChildDbEntity", "Child")
                        .WithMany("Parents_Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstParentDbEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstParentWithSharedList_tstRaw_RawLists", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("ParentWithSharedLists_RawLists")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstParentWithSharedListDbEntity", "Parent")
                        .WithMany("RawLists")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstRequiredSharedRefDbEntity", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Raw")
                        .WithMany("RequiredSharedRefs_Raw")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Raw");
                });

            modelBuilder.Entity("test.sql.tstSharedContainer_tstRaw_Shareds", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Child")
                        .WithMany("SharedContainers_Shareds")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstSharedContainerDbEntity", "Parent")
                        .WithMany("Shareds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT001ChildDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "CompositeChild")
                        .WithMany("T001Children_CompositeChild")
                        .HasForeignKey("CompositeChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompositeChild");
                });

            modelBuilder.Entity("test.sql.tstT001ParentOwner_tstT001Child_T001Children", b =>
                {
                    b.HasOne("test.sql.tstT001ChildDbEntity", "Child")
                        .WithMany("T001ParentOwners_T001Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT001ParentOwnerDbEntity", "Parent")
                        .WithMany("T001Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT002ChildHolderDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT002ChildDbEntity", "T002Child")
                        .WithMany("T002ChildHolders_T002Child")
                        .HasForeignKey("T002ChildId");

                    b.Navigation("T002Child");
                });

            modelBuilder.Entity("test.sql.tstT002ParentOwner_tstT002Child_T002Children", b =>
                {
                    b.HasOne("test.sql.tstT002ChildDbEntity", "Child")
                        .WithMany("T002ParentOwners_T002Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT002ParentOwnerDbEntity", "Parent")
                        .WithMany("T002Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT003ChildHolderDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT003ChildDbEntity", "T003Child")
                        .WithMany("T003ChildHolders_T003Child")
                        .HasForeignKey("T003ChildId");

                    b.Navigation("T003Child");
                });

            modelBuilder.Entity("test.sql.tstT003ParentOwner_tstT003Child_T003Children", b =>
                {
                    b.HasOne("test.sql.tstT003ChildDbEntity", "Child")
                        .WithMany("T003ParentOwners_T003Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT003ParentOwnerDbEntity", "Parent")
                        .WithMany("T003Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT004RecursiveLinkSet_tstT004RecursiveLinkSet_RecursiveLinks", b =>
                {
                    b.HasOne("test.sql.tstT004RecursiveLinkSetDbEntity", "Child")
                        .WithMany("T004RecursiveLinkSets_RecursiveLinks")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT004RecursiveLinkSetDbEntity", "Parent")
                        .WithMany("RecursiveLinks")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT005RecursiveLinkList_tstT005RecursiveLinkList_RecursiveLinks", b =>
                {
                    b.HasOne("test.sql.tstT005RecursiveLinkListDbEntity", "Child")
                        .WithMany("T005RecursiveLinkLists_RecursiveLinks")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT005RecursiveLinkListDbEntity", "Parent")
                        .WithMany("RecursiveLinks")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT007Leaf_tstT007Leaf_T007Leaves", b =>
                {
                    b.HasOne("test.sql.tstT007LeafDbEntity", "Child")
                        .WithMany("T007Leaves_T007Leaves")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT007LeafDbEntity", "Parent")
                        .WithMany("T007Leaves")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT007Root_tstT007Leaf_T007Leaves", b =>
                {
                    b.HasOne("test.sql.tstT007LeafDbEntity", "Child")
                        .WithMany("T007Roots_T007Leaves")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT007RootDbEntity", "Parent")
                        .WithMany("T007Leaves")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT008ParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "Child")
                        .WithMany("T008Parents_Child")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstRawDbEntity", "Raw")
                        .WithMany("T008Parents_Raw")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Raw");
                });

            modelBuilder.Entity("test.sql.tstT009CompositeDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT009PrincipalDbEntity", "T009Principal")
                        .WithMany("T009Composites")
                        .HasForeignKey("T009PrincipalId");

                    b.Navigation("T009Principal");
                });

            modelBuilder.Entity("test.sql.tstT009PrincipalDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT009CompositeDbEntity", "Composite")
                        .WithMany("T009Principals_Composite")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Composite");
                });

            modelBuilder.Entity("test.sql.tstT009UserDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT009PrincipalDbEntity", "Principal")
                        .WithMany("T009Users_Principal")
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefChildDbEntity", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Raw")
                        .WithMany("T010CompositeRefChildren_Raw")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT010CompositeRefParentDbEntity", "T010CompositeRefParent")
                        .WithMany("T010CompositeRefChildren")
                        .HasForeignKey("T010CompositeRefParentId");

                    b.Navigation("Raw");

                    b.Navigation("T010CompositeRefParent");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT010CompositeRefChildDbEntity", "T010CompositeRefChild")
                        .WithMany("T010CompositeRefParents_T010CompositeRefChild")
                        .HasForeignKey("T010CompositeRefChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T010CompositeRefChild");
                });

            modelBuilder.Entity("test.sql.tstT011CompositeRefParentContainerDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "CompositeChild")
                        .WithMany("T011CompositeRefParentContainers_CompositeChild")
                        .HasForeignKey("CompositeChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompositeChild");
                });

            modelBuilder.Entity("test.sql.tstT011CompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT011CompositeRefParentContainerDbEntity", "Container")
                        .WithMany("T011CompositeRefParents_Container")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("test.sql.tstT012CompositeRefParentContainerDbEntity", b =>
                {
                    b.HasOne("test.sql.tstCompositeChildDbEntity", "CompositeChild")
                        .WithMany("T012CompositeRefParentContainers_CompositeChild")
                        .HasForeignKey("CompositeChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompositeChild");
                });

            modelBuilder.Entity("test.sql.tstT012CompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT012CompositeRefParentContainerDbEntity", "Container")
                        .WithMany("T012CompositeRefParents_Container")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("test.sql.tstT013CompositeRefParentDbEntity", b =>
                {
                    b.HasOne("test.sql.tstT013CompositeRefParentContainerDbEntity", "Container")
                        .WithMany("T013CompositeRefParents_Container")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("test.sql.tstT014AutoCreateValueDbEntity", b =>
                {
                    b.HasOne("test.sql.tstRawDbEntity", "Reference")
                        .WithMany("T014AutoCreateValues_Reference")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL1Record_tstT015ChildL2Record_Children", b =>
                {
                    b.HasOne("test.sql.tstT015ChildL2RecordDbRecord", "Child")
                        .WithMany("T015ChildL1Records_Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT015ChildL1RecordDbRecord", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL1RecordDbRecord", b =>
                {
                    b.HasOne("test.sql.tstT015ChildL2RecordDbRecord", "OptionalChild")
                        .WithMany("T015ChildL1Records_OptionalChild")
                        .HasForeignKey("OptionalChildId");

                    b.HasOne("test.sql.tstT015ChildL2RecordDbRecord", "RequiredChild")
                        .WithMany("T015ChildL1Records_RequiredChild")
                        .HasForeignKey("RequiredChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OptionalChild");

                    b.Navigation("RequiredChild");
                });

            modelBuilder.Entity("test.sql.tstT015CompositeChildDbRecord", b =>
                {
                    b.HasOne("test.sql.tstT015ParentOrderedRecordDbRecord", "T015ParentOrderedRecord")
                        .WithMany("CompositeOderedChildren")
                        .HasForeignKey("T015ParentOrderedRecordId");

                    b.HasOne("test.sql.tstT015ParentRecordDbRecord", "T015ParentRecord")
                        .WithMany("CompositeChildren")
                        .HasForeignKey("T015ParentRecordId");

                    b.Navigation("T015ParentOrderedRecord");

                    b.Navigation("T015ParentRecord");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecord_tstT015ChildL1Record_OrderedChildren", b =>
                {
                    b.HasOne("test.sql.tstT015ChildL1RecordDbRecord", "Child")
                        .WithMany("T015ParentOrderedRecords_OrderedChildren")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT015ParentOrderedRecordDbRecord", "Parent")
                        .WithMany("OrderedChildren")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecord_tstT015ChildOwnedRecord_OrderedOwnedChildren", b =>
                {
                    b.HasOne("test.sql.tstT015ChildOwnedRecordDbRecord", "Child")
                        .WithMany("T015ParentOrderedRecords_OrderedOwnedChildren")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT015ParentOrderedRecordDbRecord", "Parent")
                        .WithMany("OrderedOwnedChildren")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT015ParentRecord_tstT015ChildL1Record_Children", b =>
                {
                    b.HasOne("test.sql.tstT015ChildL1RecordDbRecord", "Child")
                        .WithMany("T015ParentRecords_Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT015ParentRecordDbRecord", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("test.sql.tstT015ParentRecordDbRecord", b =>
                {
                    b.HasOne("test.sql.tstT015ChildL1RecordDbRecord", "OptionalChild")
                        .WithMany("T015ParentRecords_OptionalChild")
                        .HasForeignKey("OptionalChildId");

                    b.HasOne("test.sql.tstT015CompositeChildDbRecord", "OptionalCompositeChild")
                        .WithMany("T015ParentRecords_OptionalCompositeChild")
                        .HasForeignKey("OptionalCompositeChildId");

                    b.HasOne("test.sql.tstT015ChildL1RecordDbRecord", "RequiredChild")
                        .WithMany("T015ParentRecords_RequiredChild")
                        .HasForeignKey("RequiredChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("test.sql.tstT015CompositeChildDbRecord", "RequiredCompositeChild")
                        .WithMany("T015ParentRecords_RequiredCompositeChild")
                        .HasForeignKey("RequiredCompositeChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OptionalChild");

                    b.Navigation("OptionalCompositeChild");

                    b.Navigation("RequiredChild");

                    b.Navigation("RequiredCompositeChild");
                });

            modelBuilder.Entity("test.sql.tstT016CompositeChildRecordDbRecord", b =>
                {
                    b.HasOne("test.sql.tstT016CompositeParentRecordDbRecord", "T016CompositeParentRecord")
                        .WithMany("Children")
                        .HasForeignKey("T016CompositeParentRecordId");

                    b.Navigation("T016CompositeParentRecord");
                });

            modelBuilder.Entity("test.sql.tstChildDbEntity", b =>
                {
                    b.Navigation("Parents_Children");
                });

            modelBuilder.Entity("test.sql.tstCompositeChildDbEntity", b =>
                {
                    b.Navigation("CompositeRefParents_Composite");

                    b.Navigation("MultipleCompositeRefs_Composite");

                    b.Navigation("MultipleCompositeRefs_OptionalComposite");

                    b.Navigation("NestedCompositeRoots_Composite");

                    b.Navigation("NestedCompositeRoots_OptionalComposite");

                    b.Navigation("NestedComposites_Composite");

                    b.Navigation("OptionalCompositeRefParents_Composite");

                    b.Navigation("T001Children_CompositeChild");

                    b.Navigation("T008Parents_Child");

                    b.Navigation("T011CompositeRefParentContainers_CompositeChild");

                    b.Navigation("T012CompositeRefParentContainers_CompositeChild");
                });

            modelBuilder.Entity("test.sql.tstCompositesContainerDbEntity", b =>
                {
                    b.Navigation("Composites");
                });

            modelBuilder.Entity("test.sql.tstMixedContainerDbEntity", b =>
                {
                    b.Navigation("Owneds");

                    b.Navigation("Shareds");
                });

            modelBuilder.Entity("test.sql.tstMultipleSharedContainerDbEntity", b =>
                {
                    b.Navigation("FirstShareds");

                    b.Navigation("SecondShareds");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositeRootDbEntity", b =>
                {
                    b.Navigation("RawLists");
                });

            modelBuilder.Entity("test.sql.tstNestedCompositesDbEntity", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("NestedCompositeRoots_Nested");
                });

            modelBuilder.Entity("test.sql.tstOwnerContainerDbEntity", b =>
                {
                    b.Navigation("Raws");
                });

            modelBuilder.Entity("test.sql.tstParentDbEntity", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Children_SecondParent");
                });

            modelBuilder.Entity("test.sql.tstParentWithSharedListDbEntity", b =>
                {
                    b.Navigation("RawLists");
                });

            modelBuilder.Entity("test.sql.tstRawDbEntity", b =>
                {
                    b.Navigation("MixedContainers_Owneds");

                    b.Navigation("MixedContainers_Shareds");

                    b.Navigation("MultipleSharedContainers_FirstShareds");

                    b.Navigation("MultipleSharedContainers_SecondShareds");

                    b.Navigation("MultipleSharedRefs_OptionalRaw");

                    b.Navigation("MultipleSharedRefs_Raw");

                    b.Navigation("NestedCompositeRoots_OptionalRaw");

                    b.Navigation("NestedCompositeRoots_RawLists");

                    b.Navigation("OptionalSharedRefs_Raw");

                    b.Navigation("OwnerContainers_Raws");

                    b.Navigation("ParentWithSharedLists_RawLists");

                    b.Navigation("RequiredSharedRefs_Raw");

                    b.Navigation("SharedContainers_Shareds");

                    b.Navigation("T008Parents_Raw");

                    b.Navigation("T010CompositeRefChildren_Raw");

                    b.Navigation("T014AutoCreateValues_Reference");
                });

            modelBuilder.Entity("test.sql.tstSharedContainerDbEntity", b =>
                {
                    b.Navigation("Shareds");
                });

            modelBuilder.Entity("test.sql.tstT001ChildDbEntity", b =>
                {
                    b.Navigation("T001ParentOwners_T001Children");
                });

            modelBuilder.Entity("test.sql.tstT001ParentOwnerDbEntity", b =>
                {
                    b.Navigation("T001Children");
                });

            modelBuilder.Entity("test.sql.tstT002ChildDbEntity", b =>
                {
                    b.Navigation("T002ChildHolders_T002Child");

                    b.Navigation("T002ParentOwners_T002Children");
                });

            modelBuilder.Entity("test.sql.tstT002ParentOwnerDbEntity", b =>
                {
                    b.Navigation("T002Children");
                });

            modelBuilder.Entity("test.sql.tstT003ChildDbEntity", b =>
                {
                    b.Navigation("T003ChildHolders_T003Child");

                    b.Navigation("T003ParentOwners_T003Children");
                });

            modelBuilder.Entity("test.sql.tstT003ParentOwnerDbEntity", b =>
                {
                    b.Navigation("T003Children");
                });

            modelBuilder.Entity("test.sql.tstT004RecursiveLinkSetDbEntity", b =>
                {
                    b.Navigation("RecursiveLinks");

                    b.Navigation("T004RecursiveLinkSets_RecursiveLinks");
                });

            modelBuilder.Entity("test.sql.tstT005RecursiveLinkListDbEntity", b =>
                {
                    b.Navigation("RecursiveLinks");

                    b.Navigation("T005RecursiveLinkLists_RecursiveLinks");
                });

            modelBuilder.Entity("test.sql.tstT007LeafDbEntity", b =>
                {
                    b.Navigation("T007Leaves");

                    b.Navigation("T007Leaves_T007Leaves");

                    b.Navigation("T007Roots_T007Leaves");
                });

            modelBuilder.Entity("test.sql.tstT007RootDbEntity", b =>
                {
                    b.Navigation("T007Leaves");
                });

            modelBuilder.Entity("test.sql.tstT009CompositeDbEntity", b =>
                {
                    b.Navigation("T009Principals_Composite");
                });

            modelBuilder.Entity("test.sql.tstT009PrincipalDbEntity", b =>
                {
                    b.Navigation("T009Composites");

                    b.Navigation("T009Users_Principal");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefChildDbEntity", b =>
                {
                    b.Navigation("T010CompositeRefParents_T010CompositeRefChild");
                });

            modelBuilder.Entity("test.sql.tstT010CompositeRefParentDbEntity", b =>
                {
                    b.Navigation("T010CompositeRefChildren");
                });

            modelBuilder.Entity("test.sql.tstT011CompositeRefParentContainerDbEntity", b =>
                {
                    b.Navigation("CompositeChildren");

                    b.Navigation("T011CompositeRefParents_Container");
                });

            modelBuilder.Entity("test.sql.tstT012CompositeRefParentContainerDbEntity", b =>
                {
                    b.Navigation("T012CompositeRefParents_Container");
                });

            modelBuilder.Entity("test.sql.tstT013CompositeRefParentContainerDbEntity", b =>
                {
                    b.Navigation("CompositeChildren");

                    b.Navigation("T013CompositeRefParents_Container");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL1RecordDbRecord", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("T015ParentOrderedRecords_OrderedChildren");

                    b.Navigation("T015ParentRecords_Children");

                    b.Navigation("T015ParentRecords_OptionalChild");

                    b.Navigation("T015ParentRecords_RequiredChild");
                });

            modelBuilder.Entity("test.sql.tstT015ChildL2RecordDbRecord", b =>
                {
                    b.Navigation("T015ChildL1Records_Children");

                    b.Navigation("T015ChildL1Records_OptionalChild");

                    b.Navigation("T015ChildL1Records_RequiredChild");
                });

            modelBuilder.Entity("test.sql.tstT015ChildOwnedRecordDbRecord", b =>
                {
                    b.Navigation("T015ParentOrderedRecords_OrderedOwnedChildren");
                });

            modelBuilder.Entity("test.sql.tstT015CompositeChildDbRecord", b =>
                {
                    b.Navigation("T015ParentRecords_OptionalCompositeChild");

                    b.Navigation("T015ParentRecords_RequiredCompositeChild");
                });

            modelBuilder.Entity("test.sql.tstT015ParentOrderedRecordDbRecord", b =>
                {
                    b.Navigation("CompositeOderedChildren");

                    b.Navigation("OrderedChildren");

                    b.Navigation("OrderedOwnedChildren");
                });

            modelBuilder.Entity("test.sql.tstT015ParentRecordDbRecord", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CompositeChildren");
                });

            modelBuilder.Entity("test.sql.tstT016CompositeParentRecordDbRecord", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
